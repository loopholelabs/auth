/*
 	Copyright 2023 Loophole Labs

 	Licensed under the Apache License, Version 2.0 (the "License");
 	you may not use this file except in compliance with the License.
 	You may obtain a copy of the License at

 		   http://www.apache.org/licenses/LICENSE-2.0

 	Unless required by applicable law or agreed to in writing, software
 	distributed under the License is distributed on an "AS IS" BASIS,
 	WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 	See the License for the specific language governing permissions and
 	limitations under the License.
*/

// Code generated by ent, DO NOT EDIT.

package deviceflow

import (
	"time"

	"entgo.io/ent/dialect/sql"
)

const (
	// Label holds the string label denoting the deviceflow type in the database.
	Label = "device_flow"
	// FieldID holds the string denoting the id field in the database.
	FieldID = "id"
	// FieldCreatedAt holds the string denoting the created_at field in the database.
	FieldCreatedAt = "created_at"
	// FieldLastPoll holds the string denoting the last_poll field in the database.
	FieldLastPoll = "last_poll"
	// FieldIdentifier holds the string denoting the identifier field in the database.
	FieldIdentifier = "identifier"
	// FieldDeviceCode holds the string denoting the device_code field in the database.
	FieldDeviceCode = "device_code"
	// FieldUserCode holds the string denoting the user_code field in the database.
	FieldUserCode = "user_code"
	// FieldSession holds the string denoting the session field in the database.
	FieldSession = "session"
	// FieldExpiresAt holds the string denoting the expires_at field in the database.
	FieldExpiresAt = "expires_at"
	// Table holds the table name of the deviceflow in the database.
	Table = "device_flows"
)

// Columns holds all SQL columns for deviceflow fields.
var Columns = []string{
	FieldID,
	FieldCreatedAt,
	FieldLastPoll,
	FieldIdentifier,
	FieldDeviceCode,
	FieldUserCode,
	FieldSession,
	FieldExpiresAt,
}

// ValidColumn reports if the column name is valid (part of the table columns).
func ValidColumn(column string) bool {
	for i := range Columns {
		if column == Columns[i] {
			return true
		}
	}
	return false
}

var (
	// DefaultCreatedAt holds the default value on creation for the "created_at" field.
	DefaultCreatedAt func() time.Time
	// DefaultLastPoll holds the default value on creation for the "last_poll" field.
	DefaultLastPoll func() time.Time
	// IdentifierValidator is a validator for the "identifier" field. It is called by the builders before save.
	IdentifierValidator func(string) error
	// DeviceCodeValidator is a validator for the "device_code" field. It is called by the builders before save.
	DeviceCodeValidator func(string) error
	// UserCodeValidator is a validator for the "user_code" field. It is called by the builders before save.
	UserCodeValidator func(string) error
)

// OrderOption defines the ordering options for the DeviceFlow queries.
type OrderOption func(*sql.Selector)

// ByID orders the results by the id field.
func ByID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldID, opts...).ToFunc()
}

// ByCreatedAt orders the results by the created_at field.
func ByCreatedAt(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldCreatedAt, opts...).ToFunc()
}

// ByLastPoll orders the results by the last_poll field.
func ByLastPoll(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldLastPoll, opts...).ToFunc()
}

// ByIdentifier orders the results by the identifier field.
func ByIdentifier(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldIdentifier, opts...).ToFunc()
}

// ByDeviceCode orders the results by the device_code field.
func ByDeviceCode(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldDeviceCode, opts...).ToFunc()
}

// ByUserCode orders the results by the user_code field.
func ByUserCode(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldUserCode, opts...).ToFunc()
}

// BySession orders the results by the session field.
func BySession(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldSession, opts...).ToFunc()
}

// ByExpiresAt orders the results by the expires_at field.
func ByExpiresAt(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldExpiresAt, opts...).ToFunc()
}
