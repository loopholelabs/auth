/*
	Copyright 2023 Loophole Labs

	Licensed under the Apache License, Version 2.0 (the "License");
	you may not use this file except in compliance with the License.
	You may obtain a copy of the License at

		   http://www.apache.org/licenses/LICENSE-2.0

	Unless required by applicable law or agreed to in writing, software
	distributed under the License is distributed on an "AS IS" BASIS,
	WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
	See the License for the specific language governing permissions and
	limitations under the License.
*/

// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/loopholelabs/auth/internal/ent/githubflow"
)

// GithubFlowCreate is the builder for creating a GithubFlow entity.
type GithubFlowCreate struct {
	config
	mutation *GithubFlowMutation
	hooks    []Hook
}

// SetCreatedAt sets the "created_at" field.
func (gfc *GithubFlowCreate) SetCreatedAt(t time.Time) *GithubFlowCreate {
	gfc.mutation.SetCreatedAt(t)
	return gfc
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (gfc *GithubFlowCreate) SetNillableCreatedAt(t *time.Time) *GithubFlowCreate {
	if t != nil {
		gfc.SetCreatedAt(*t)
	}
	return gfc
}

// SetState sets the "state" field.
func (gfc *GithubFlowCreate) SetState(s string) *GithubFlowCreate {
	gfc.mutation.SetState(s)
	return gfc
}

// SetVerifier sets the "verifier" field.
func (gfc *GithubFlowCreate) SetVerifier(s string) *GithubFlowCreate {
	gfc.mutation.SetVerifier(s)
	return gfc
}

// SetChallenge sets the "challenge" field.
func (gfc *GithubFlowCreate) SetChallenge(s string) *GithubFlowCreate {
	gfc.mutation.SetChallenge(s)
	return gfc
}

// SetNextURL sets the "next_url" field.
func (gfc *GithubFlowCreate) SetNextURL(s string) *GithubFlowCreate {
	gfc.mutation.SetNextURL(s)
	return gfc
}

// SetOrganization sets the "organization" field.
func (gfc *GithubFlowCreate) SetOrganization(s string) *GithubFlowCreate {
	gfc.mutation.SetOrganization(s)
	return gfc
}

// SetNillableOrganization sets the "organization" field if the given value is not nil.
func (gfc *GithubFlowCreate) SetNillableOrganization(s *string) *GithubFlowCreate {
	if s != nil {
		gfc.SetOrganization(*s)
	}
	return gfc
}

// SetDeviceIdentifier sets the "device_identifier" field.
func (gfc *GithubFlowCreate) SetDeviceIdentifier(s string) *GithubFlowCreate {
	gfc.mutation.SetDeviceIdentifier(s)
	return gfc
}

// SetNillableDeviceIdentifier sets the "device_identifier" field if the given value is not nil.
func (gfc *GithubFlowCreate) SetNillableDeviceIdentifier(s *string) *GithubFlowCreate {
	if s != nil {
		gfc.SetDeviceIdentifier(*s)
	}
	return gfc
}

// Mutation returns the GithubFlowMutation object of the builder.
func (gfc *GithubFlowCreate) Mutation() *GithubFlowMutation {
	return gfc.mutation
}

// Save creates the GithubFlow in the database.
func (gfc *GithubFlowCreate) Save(ctx context.Context) (*GithubFlow, error) {
	var (
		err  error
		node *GithubFlow
	)
	gfc.defaults()
	if len(gfc.hooks) == 0 {
		if err = gfc.check(); err != nil {
			return nil, err
		}
		node, err = gfc.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*GithubFlowMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			if err = gfc.check(); err != nil {
				return nil, err
			}
			gfc.mutation = mutation
			if node, err = gfc.sqlSave(ctx); err != nil {
				return nil, err
			}
			mutation.id = &node.ID
			mutation.done = true
			return node, err
		})
		for i := len(gfc.hooks) - 1; i >= 0; i-- {
			if gfc.hooks[i] == nil {
				return nil, fmt.Errorf("ent: uninitialized hook (forgotten import ent/runtime?)")
			}
			mut = gfc.hooks[i](mut)
		}
		v, err := mut.Mutate(ctx, gfc.mutation)
		if err != nil {
			return nil, err
		}
		nv, ok := v.(*GithubFlow)
		if !ok {
			return nil, fmt.Errorf("unexpected node type %T returned from GithubFlowMutation", v)
		}
		node = nv
	}
	return node, err
}

// SaveX calls Save and panics if Save returns an error.
func (gfc *GithubFlowCreate) SaveX(ctx context.Context) *GithubFlow {
	v, err := gfc.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (gfc *GithubFlowCreate) Exec(ctx context.Context) error {
	_, err := gfc.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (gfc *GithubFlowCreate) ExecX(ctx context.Context) {
	if err := gfc.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (gfc *GithubFlowCreate) defaults() {
	if _, ok := gfc.mutation.CreatedAt(); !ok {
		v := githubflow.DefaultCreatedAt()
		gfc.mutation.SetCreatedAt(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (gfc *GithubFlowCreate) check() error {
	if _, ok := gfc.mutation.CreatedAt(); !ok {
		return &ValidationError{Name: "created_at", err: errors.New(`ent: missing required field "GithubFlow.created_at"`)}
	}
	if _, ok := gfc.mutation.State(); !ok {
		return &ValidationError{Name: "state", err: errors.New(`ent: missing required field "GithubFlow.state"`)}
	}
	if v, ok := gfc.mutation.State(); ok {
		if err := githubflow.StateValidator(v); err != nil {
			return &ValidationError{Name: "state", err: fmt.Errorf(`ent: validator failed for field "GithubFlow.state": %w`, err)}
		}
	}
	if _, ok := gfc.mutation.Verifier(); !ok {
		return &ValidationError{Name: "verifier", err: errors.New(`ent: missing required field "GithubFlow.verifier"`)}
	}
	if v, ok := gfc.mutation.Verifier(); ok {
		if err := githubflow.VerifierValidator(v); err != nil {
			return &ValidationError{Name: "verifier", err: fmt.Errorf(`ent: validator failed for field "GithubFlow.verifier": %w`, err)}
		}
	}
	if _, ok := gfc.mutation.Challenge(); !ok {
		return &ValidationError{Name: "challenge", err: errors.New(`ent: missing required field "GithubFlow.challenge"`)}
	}
	if v, ok := gfc.mutation.Challenge(); ok {
		if err := githubflow.ChallengeValidator(v); err != nil {
			return &ValidationError{Name: "challenge", err: fmt.Errorf(`ent: validator failed for field "GithubFlow.challenge": %w`, err)}
		}
	}
	if _, ok := gfc.mutation.NextURL(); !ok {
		return &ValidationError{Name: "next_url", err: errors.New(`ent: missing required field "GithubFlow.next_url"`)}
	}
	if v, ok := gfc.mutation.NextURL(); ok {
		if err := githubflow.NextURLValidator(v); err != nil {
			return &ValidationError{Name: "next_url", err: fmt.Errorf(`ent: validator failed for field "GithubFlow.next_url": %w`, err)}
		}
	}
	return nil
}

func (gfc *GithubFlowCreate) sqlSave(ctx context.Context) (*GithubFlow, error) {
	_node, _spec := gfc.createSpec()
	if err := sqlgraph.CreateNode(ctx, gfc.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	id := _spec.ID.Value.(int64)
	_node.ID = int(id)
	return _node, nil
}

func (gfc *GithubFlowCreate) createSpec() (*GithubFlow, *sqlgraph.CreateSpec) {
	var (
		_node = &GithubFlow{config: gfc.config}
		_spec = &sqlgraph.CreateSpec{
			Table: githubflow.Table,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt,
				Column: githubflow.FieldID,
			},
		}
	)
	if value, ok := gfc.mutation.CreatedAt(); ok {
		_spec.SetField(githubflow.FieldCreatedAt, field.TypeTime, value)
		_node.CreatedAt = value
	}
	if value, ok := gfc.mutation.State(); ok {
		_spec.SetField(githubflow.FieldState, field.TypeString, value)
		_node.State = value
	}
	if value, ok := gfc.mutation.Verifier(); ok {
		_spec.SetField(githubflow.FieldVerifier, field.TypeString, value)
		_node.Verifier = value
	}
	if value, ok := gfc.mutation.Challenge(); ok {
		_spec.SetField(githubflow.FieldChallenge, field.TypeString, value)
		_node.Challenge = value
	}
	if value, ok := gfc.mutation.NextURL(); ok {
		_spec.SetField(githubflow.FieldNextURL, field.TypeString, value)
		_node.NextURL = value
	}
	if value, ok := gfc.mutation.Organization(); ok {
		_spec.SetField(githubflow.FieldOrganization, field.TypeString, value)
		_node.Organization = value
	}
	if value, ok := gfc.mutation.DeviceIdentifier(); ok {
		_spec.SetField(githubflow.FieldDeviceIdentifier, field.TypeString, value)
		_node.DeviceIdentifier = value
	}
	return _node, _spec
}

// GithubFlowCreateBulk is the builder for creating many GithubFlow entities in bulk.
type GithubFlowCreateBulk struct {
	config
	builders []*GithubFlowCreate
}

// Save creates the GithubFlow entities in the database.
func (gfcb *GithubFlowCreateBulk) Save(ctx context.Context) ([]*GithubFlow, error) {
	specs := make([]*sqlgraph.CreateSpec, len(gfcb.builders))
	nodes := make([]*GithubFlow, len(gfcb.builders))
	mutators := make([]Mutator, len(gfcb.builders))
	for i := range gfcb.builders {
		func(i int, root context.Context) {
			builder := gfcb.builders[i]
			builder.defaults()
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*GithubFlowMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				nodes[i], specs[i] = builder.createSpec()
				var err error
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, gfcb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, gfcb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{msg: err.Error(), wrap: err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				if specs[i].ID.Value != nil {
					id := specs[i].ID.Value.(int64)
					nodes[i].ID = int(id)
				}
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, gfcb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (gfcb *GithubFlowCreateBulk) SaveX(ctx context.Context) []*GithubFlow {
	v, err := gfcb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (gfcb *GithubFlowCreateBulk) Exec(ctx context.Context) error {
	_, err := gfcb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (gfcb *GithubFlowCreateBulk) ExecX(ctx context.Context) {
	if err := gfcb.Exec(ctx); err != nil {
		panic(err)
	}
}
