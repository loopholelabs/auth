/*
 	Copyright 2023 Loophole Labs

 	Licensed under the Apache License, Version 2.0 (the "License");
 	you may not use this file except in compliance with the License.
 	You may obtain a copy of the License at

 		   http://www.apache.org/licenses/LICENSE-2.0

 	Unless required by applicable law or agreed to in writing, software
 	distributed under the License is distributed on an "AS IS" BASIS,
 	WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 	See the License for the specific language governing permissions and
 	limitations under the License.
*/

// Code generated by ent, DO NOT EDIT.

package googleflow

import (
	"time"

	"entgo.io/ent/dialect/sql"
)

const (
	// Label holds the string label denoting the googleflow type in the database.
	Label = "google_flow"
	// FieldID holds the string denoting the id field in the database.
	FieldID = "id"
	// FieldCreatedAt holds the string denoting the created_at field in the database.
	FieldCreatedAt = "created_at"
	// FieldState holds the string denoting the state field in the database.
	FieldState = "state"
	// FieldVerifier holds the string denoting the verifier field in the database.
	FieldVerifier = "verifier"
	// FieldChallenge holds the string denoting the challenge field in the database.
	FieldChallenge = "challenge"
	// FieldNextURL holds the string denoting the next_url field in the database.
	FieldNextURL = "next_url"
	// FieldOrganization holds the string denoting the organization field in the database.
	FieldOrganization = "organization"
	// FieldDeviceIdentifier holds the string denoting the device_identifier field in the database.
	FieldDeviceIdentifier = "device_identifier"
	// Table holds the table name of the googleflow in the database.
	Table = "google_flows"
)

// Columns holds all SQL columns for googleflow fields.
var Columns = []string{
	FieldID,
	FieldCreatedAt,
	FieldState,
	FieldVerifier,
	FieldChallenge,
	FieldNextURL,
	FieldOrganization,
	FieldDeviceIdentifier,
}

// ValidColumn reports if the column name is valid (part of the table columns).
func ValidColumn(column string) bool {
	for i := range Columns {
		if column == Columns[i] {
			return true
		}
	}
	return false
}

var (
	// DefaultCreatedAt holds the default value on creation for the "created_at" field.
	DefaultCreatedAt func() time.Time
	// StateValidator is a validator for the "state" field. It is called by the builders before save.
	StateValidator func(string) error
	// VerifierValidator is a validator for the "verifier" field. It is called by the builders before save.
	VerifierValidator func(string) error
	// ChallengeValidator is a validator for the "challenge" field. It is called by the builders before save.
	ChallengeValidator func(string) error
	// NextURLValidator is a validator for the "next_url" field. It is called by the builders before save.
	NextURLValidator func(string) error
)

// OrderOption defines the ordering options for the GoogleFlow queries.
type OrderOption func(*sql.Selector)

// ByID orders the results by the id field.
func ByID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldID, opts...).ToFunc()
}

// ByCreatedAt orders the results by the created_at field.
func ByCreatedAt(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldCreatedAt, opts...).ToFunc()
}

// ByState orders the results by the state field.
func ByState(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldState, opts...).ToFunc()
}

// ByVerifier orders the results by the verifier field.
func ByVerifier(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldVerifier, opts...).ToFunc()
}

// ByChallenge orders the results by the challenge field.
func ByChallenge(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldChallenge, opts...).ToFunc()
}

// ByNextURL orders the results by the next_url field.
func ByNextURL(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldNextURL, opts...).ToFunc()
}

// ByOrganization orders the results by the organization field.
func ByOrganization(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldOrganization, opts...).ToFunc()
}

// ByDeviceIdentifier orders the results by the device_identifier field.
func ByDeviceIdentifier(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldDeviceIdentifier, opts...).ToFunc()
}
