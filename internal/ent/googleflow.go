/*
	Copyright 2023 Loophole Labs

	Licensed under the Apache License, Version 2.0 (the "License");
	you may not use this file except in compliance with the License.
	You may obtain a copy of the License at

		   http://www.apache.org/licenses/LICENSE-2.0

	Unless required by applicable law or agreed to in writing, software
	distributed under the License is distributed on an "AS IS" BASIS,
	WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
	See the License for the specific language governing permissions and
	limitations under the License.
*/

// Code generated by ent, DO NOT EDIT.

package ent

import (
	"fmt"
	"strings"
	"time"

	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
	"github.com/loopholelabs/auth/internal/ent/googleflow"
)

// GoogleFlow is the model entity for the GoogleFlow schema.
type GoogleFlow struct {
	config `json:"-"`
	// ID of the ent.
	ID int `json:"id,omitempty"`
	// CreatedAt holds the value of the "created_at" field.
	CreatedAt time.Time `json:"created_at,omitempty"`
	// State holds the value of the "state" field.
	State string `json:"state,omitempty"`
	// Verifier holds the value of the "verifier" field.
	Verifier string `json:"verifier,omitempty"`
	// Challenge holds the value of the "challenge" field.
	Challenge string `json:"challenge,omitempty"`
	// NextURL holds the value of the "next_url" field.
	NextURL string `json:"next_url,omitempty"`
	// Organization holds the value of the "organization" field.
	Organization string `json:"organization,omitempty"`
	// DeviceIdentifier holds the value of the "device_identifier" field.
	DeviceIdentifier string `json:"device_identifier,omitempty"`
	selectValues     sql.SelectValues
}

// scanValues returns the types for scanning values from sql.Rows.
func (*GoogleFlow) scanValues(columns []string) ([]any, error) {
	values := make([]any, len(columns))
	for i := range columns {
		switch columns[i] {
		case googleflow.FieldID:
			values[i] = new(sql.NullInt64)
		case googleflow.FieldState, googleflow.FieldVerifier, googleflow.FieldChallenge, googleflow.FieldNextURL, googleflow.FieldOrganization, googleflow.FieldDeviceIdentifier:
			values[i] = new(sql.NullString)
		case googleflow.FieldCreatedAt:
			values[i] = new(sql.NullTime)
		default:
			values[i] = new(sql.UnknownType)
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the GoogleFlow fields.
func (gf *GoogleFlow) assignValues(columns []string, values []any) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case googleflow.FieldID:
			value, ok := values[i].(*sql.NullInt64)
			if !ok {
				return fmt.Errorf("unexpected type %T for field id", value)
			}
			gf.ID = int(value.Int64)
		case googleflow.FieldCreatedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field created_at", values[i])
			} else if value.Valid {
				gf.CreatedAt = value.Time
			}
		case googleflow.FieldState:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field state", values[i])
			} else if value.Valid {
				gf.State = value.String
			}
		case googleflow.FieldVerifier:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field verifier", values[i])
			} else if value.Valid {
				gf.Verifier = value.String
			}
		case googleflow.FieldChallenge:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field challenge", values[i])
			} else if value.Valid {
				gf.Challenge = value.String
			}
		case googleflow.FieldNextURL:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field next_url", values[i])
			} else if value.Valid {
				gf.NextURL = value.String
			}
		case googleflow.FieldOrganization:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field organization", values[i])
			} else if value.Valid {
				gf.Organization = value.String
			}
		case googleflow.FieldDeviceIdentifier:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field device_identifier", values[i])
			} else if value.Valid {
				gf.DeviceIdentifier = value.String
			}
		default:
			gf.selectValues.Set(columns[i], values[i])
		}
	}
	return nil
}

// Value returns the ent.Value that was dynamically selected and assigned to the GoogleFlow.
// This includes values selected through modifiers, order, etc.
func (gf *GoogleFlow) Value(name string) (ent.Value, error) {
	return gf.selectValues.Get(name)
}

// Update returns a builder for updating this GoogleFlow.
// Note that you need to call GoogleFlow.Unwrap() before calling this method if this GoogleFlow
// was returned from a transaction, and the transaction was committed or rolled back.
func (gf *GoogleFlow) Update() *GoogleFlowUpdateOne {
	return NewGoogleFlowClient(gf.config).UpdateOne(gf)
}

// Unwrap unwraps the GoogleFlow entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (gf *GoogleFlow) Unwrap() *GoogleFlow {
	_tx, ok := gf.config.driver.(*txDriver)
	if !ok {
		panic("ent: GoogleFlow is not a transactional entity")
	}
	gf.config.driver = _tx.drv
	return gf
}

// String implements the fmt.Stringer.
func (gf *GoogleFlow) String() string {
	var builder strings.Builder
	builder.WriteString("GoogleFlow(")
	builder.WriteString(fmt.Sprintf("id=%v, ", gf.ID))
	builder.WriteString("created_at=")
	builder.WriteString(gf.CreatedAt.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("state=")
	builder.WriteString(gf.State)
	builder.WriteString(", ")
	builder.WriteString("verifier=")
	builder.WriteString(gf.Verifier)
	builder.WriteString(", ")
	builder.WriteString("challenge=")
	builder.WriteString(gf.Challenge)
	builder.WriteString(", ")
	builder.WriteString("next_url=")
	builder.WriteString(gf.NextURL)
	builder.WriteString(", ")
	builder.WriteString("organization=")
	builder.WriteString(gf.Organization)
	builder.WriteString(", ")
	builder.WriteString("device_identifier=")
	builder.WriteString(gf.DeviceIdentifier)
	builder.WriteByte(')')
	return builder.String()
}

// GoogleFlows is a parsable slice of GoogleFlow.
type GoogleFlows []*GoogleFlow
