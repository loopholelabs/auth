/*
	Copyright 2023 Loophole Labs

	Licensed under the Apache License, Version 2.0 (the "License");
	you may not use this file except in compliance with the License.
	You may obtain a copy of the License at

		   http://www.apache.org/licenses/LICENSE-2.0

	Unless required by applicable law or agreed to in writing, software
	distributed under the License is distributed on an "AS IS" BASIS,
	WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
	See the License for the specific language governing permissions and
	limitations under the License.
*/

// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/loopholelabs/auth/internal/ent/deviceflow"
	"github.com/loopholelabs/auth/internal/ent/predicate"
)

// DeviceFlowDelete is the builder for deleting a DeviceFlow entity.
type DeviceFlowDelete struct {
	config
	hooks    []Hook
	mutation *DeviceFlowMutation
}

// Where appends a list predicates to the DeviceFlowDelete builder.
func (dfd *DeviceFlowDelete) Where(ps ...predicate.DeviceFlow) *DeviceFlowDelete {
	dfd.mutation.Where(ps...)
	return dfd
}

// Exec executes the deletion query and returns how many vertices were deleted.
func (dfd *DeviceFlowDelete) Exec(ctx context.Context) (int, error) {
	return withHooks(ctx, dfd.sqlExec, dfd.mutation, dfd.hooks)
}

// ExecX is like Exec, but panics if an error occurs.
func (dfd *DeviceFlowDelete) ExecX(ctx context.Context) int {
	n, err := dfd.Exec(ctx)
	if err != nil {
		panic(err)
	}
	return n
}

func (dfd *DeviceFlowDelete) sqlExec(ctx context.Context) (int, error) {
	_spec := sqlgraph.NewDeleteSpec(deviceflow.Table, sqlgraph.NewFieldSpec(deviceflow.FieldID, field.TypeInt))
	if ps := dfd.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	affected, err := sqlgraph.DeleteNodes(ctx, dfd.driver, _spec)
	if err != nil && sqlgraph.IsConstraintError(err) {
		err = &ConstraintError{msg: err.Error(), wrap: err}
	}
	dfd.mutation.done = true
	return affected, err
}

// DeviceFlowDeleteOne is the builder for deleting a single DeviceFlow entity.
type DeviceFlowDeleteOne struct {
	dfd *DeviceFlowDelete
}

// Where appends a list predicates to the DeviceFlowDelete builder.
func (dfdo *DeviceFlowDeleteOne) Where(ps ...predicate.DeviceFlow) *DeviceFlowDeleteOne {
	dfdo.dfd.mutation.Where(ps...)
	return dfdo
}

// Exec executes the deletion query.
func (dfdo *DeviceFlowDeleteOne) Exec(ctx context.Context) error {
	n, err := dfdo.dfd.Exec(ctx)
	switch {
	case err != nil:
		return err
	case n == 0:
		return &NotFoundError{deviceflow.Label}
	default:
		return nil
	}
}

// ExecX is like Exec, but panics if an error occurs.
func (dfdo *DeviceFlowDeleteOne) ExecX(ctx context.Context) {
	if err := dfdo.Exec(ctx); err != nil {
		panic(err)
	}
}
