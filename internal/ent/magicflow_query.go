/*
	Copyright 2023 Loophole Labs

	Licensed under the Apache License, Version 2.0 (the "License");
	you may not use this file except in compliance with the License.
	You may obtain a copy of the License at

		   http://www.apache.org/licenses/LICENSE-2.0

	Unless required by applicable law or agreed to in writing, software
	distributed under the License is distributed on an "AS IS" BASIS,
	WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
	See the License for the specific language governing permissions and
	limitations under the License.
*/

// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"fmt"
	"math"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/loopholelabs/auth/internal/ent/magicflow"
	"github.com/loopholelabs/auth/internal/ent/predicate"
)

// MagicFlowQuery is the builder for querying MagicFlow entities.
type MagicFlowQuery struct {
	config
	ctx        *QueryContext
	order      []OrderFunc
	inters     []Interceptor
	predicates []predicate.MagicFlow
	// intermediate query (i.e. traversal path).
	sql  *sql.Selector
	path func(context.Context) (*sql.Selector, error)
}

// Where adds a new predicate for the MagicFlowQuery builder.
func (mfq *MagicFlowQuery) Where(ps ...predicate.MagicFlow) *MagicFlowQuery {
	mfq.predicates = append(mfq.predicates, ps...)
	return mfq
}

// Limit the number of records to be returned by this query.
func (mfq *MagicFlowQuery) Limit(limit int) *MagicFlowQuery {
	mfq.ctx.Limit = &limit
	return mfq
}

// Offset to start from.
func (mfq *MagicFlowQuery) Offset(offset int) *MagicFlowQuery {
	mfq.ctx.Offset = &offset
	return mfq
}

// Unique configures the query builder to filter duplicate records on query.
// By default, unique is set to true, and can be disabled using this method.
func (mfq *MagicFlowQuery) Unique(unique bool) *MagicFlowQuery {
	mfq.ctx.Unique = &unique
	return mfq
}

// Order specifies how the records should be ordered.
func (mfq *MagicFlowQuery) Order(o ...OrderFunc) *MagicFlowQuery {
	mfq.order = append(mfq.order, o...)
	return mfq
}

// First returns the first MagicFlow entity from the query.
// Returns a *NotFoundError when no MagicFlow was found.
func (mfq *MagicFlowQuery) First(ctx context.Context) (*MagicFlow, error) {
	nodes, err := mfq.Limit(1).All(setContextOp(ctx, mfq.ctx, "First"))
	if err != nil {
		return nil, err
	}
	if len(nodes) == 0 {
		return nil, &NotFoundError{magicflow.Label}
	}
	return nodes[0], nil
}

// FirstX is like First, but panics if an error occurs.
func (mfq *MagicFlowQuery) FirstX(ctx context.Context) *MagicFlow {
	node, err := mfq.First(ctx)
	if err != nil && !IsNotFound(err) {
		panic(err)
	}
	return node
}

// FirstID returns the first MagicFlow ID from the query.
// Returns a *NotFoundError when no MagicFlow ID was found.
func (mfq *MagicFlowQuery) FirstID(ctx context.Context) (id int, err error) {
	var ids []int
	if ids, err = mfq.Limit(1).IDs(setContextOp(ctx, mfq.ctx, "FirstID")); err != nil {
		return
	}
	if len(ids) == 0 {
		err = &NotFoundError{magicflow.Label}
		return
	}
	return ids[0], nil
}

// FirstIDX is like FirstID, but panics if an error occurs.
func (mfq *MagicFlowQuery) FirstIDX(ctx context.Context) int {
	id, err := mfq.FirstID(ctx)
	if err != nil && !IsNotFound(err) {
		panic(err)
	}
	return id
}

// Only returns a single MagicFlow entity found by the query, ensuring it only returns one.
// Returns a *NotSingularError when more than one MagicFlow entity is found.
// Returns a *NotFoundError when no MagicFlow entities are found.
func (mfq *MagicFlowQuery) Only(ctx context.Context) (*MagicFlow, error) {
	nodes, err := mfq.Limit(2).All(setContextOp(ctx, mfq.ctx, "Only"))
	if err != nil {
		return nil, err
	}
	switch len(nodes) {
	case 1:
		return nodes[0], nil
	case 0:
		return nil, &NotFoundError{magicflow.Label}
	default:
		return nil, &NotSingularError{magicflow.Label}
	}
}

// OnlyX is like Only, but panics if an error occurs.
func (mfq *MagicFlowQuery) OnlyX(ctx context.Context) *MagicFlow {
	node, err := mfq.Only(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// OnlyID is like Only, but returns the only MagicFlow ID in the query.
// Returns a *NotSingularError when more than one MagicFlow ID is found.
// Returns a *NotFoundError when no entities are found.
func (mfq *MagicFlowQuery) OnlyID(ctx context.Context) (id int, err error) {
	var ids []int
	if ids, err = mfq.Limit(2).IDs(setContextOp(ctx, mfq.ctx, "OnlyID")); err != nil {
		return
	}
	switch len(ids) {
	case 1:
		id = ids[0]
	case 0:
		err = &NotFoundError{magicflow.Label}
	default:
		err = &NotSingularError{magicflow.Label}
	}
	return
}

// OnlyIDX is like OnlyID, but panics if an error occurs.
func (mfq *MagicFlowQuery) OnlyIDX(ctx context.Context) int {
	id, err := mfq.OnlyID(ctx)
	if err != nil {
		panic(err)
	}
	return id
}

// All executes the query and returns a list of MagicFlows.
func (mfq *MagicFlowQuery) All(ctx context.Context) ([]*MagicFlow, error) {
	ctx = setContextOp(ctx, mfq.ctx, "All")
	if err := mfq.prepareQuery(ctx); err != nil {
		return nil, err
	}
	qr := querierAll[[]*MagicFlow, *MagicFlowQuery]()
	return withInterceptors[[]*MagicFlow](ctx, mfq, qr, mfq.inters)
}

// AllX is like All, but panics if an error occurs.
func (mfq *MagicFlowQuery) AllX(ctx context.Context) []*MagicFlow {
	nodes, err := mfq.All(ctx)
	if err != nil {
		panic(err)
	}
	return nodes
}

// IDs executes the query and returns a list of MagicFlow IDs.
func (mfq *MagicFlowQuery) IDs(ctx context.Context) ([]int, error) {
	var ids []int
	ctx = setContextOp(ctx, mfq.ctx, "IDs")
	if err := mfq.Select(magicflow.FieldID).Scan(ctx, &ids); err != nil {
		return nil, err
	}
	return ids, nil
}

// IDsX is like IDs, but panics if an error occurs.
func (mfq *MagicFlowQuery) IDsX(ctx context.Context) []int {
	ids, err := mfq.IDs(ctx)
	if err != nil {
		panic(err)
	}
	return ids
}

// Count returns the count of the given query.
func (mfq *MagicFlowQuery) Count(ctx context.Context) (int, error) {
	ctx = setContextOp(ctx, mfq.ctx, "Count")
	if err := mfq.prepareQuery(ctx); err != nil {
		return 0, err
	}
	return withInterceptors[int](ctx, mfq, querierCount[*MagicFlowQuery](), mfq.inters)
}

// CountX is like Count, but panics if an error occurs.
func (mfq *MagicFlowQuery) CountX(ctx context.Context) int {
	count, err := mfq.Count(ctx)
	if err != nil {
		panic(err)
	}
	return count
}

// Exist returns true if the query has elements in the graph.
func (mfq *MagicFlowQuery) Exist(ctx context.Context) (bool, error) {
	ctx = setContextOp(ctx, mfq.ctx, "Exist")
	switch _, err := mfq.FirstID(ctx); {
	case IsNotFound(err):
		return false, nil
	case err != nil:
		return false, fmt.Errorf("ent: check existence: %w", err)
	default:
		return true, nil
	}
}

// ExistX is like Exist, but panics if an error occurs.
func (mfq *MagicFlowQuery) ExistX(ctx context.Context) bool {
	exist, err := mfq.Exist(ctx)
	if err != nil {
		panic(err)
	}
	return exist
}

// Clone returns a duplicate of the MagicFlowQuery builder, including all associated steps. It can be
// used to prepare common query builders and use them differently after the clone is made.
func (mfq *MagicFlowQuery) Clone() *MagicFlowQuery {
	if mfq == nil {
		return nil
	}
	return &MagicFlowQuery{
		config:     mfq.config,
		ctx:        mfq.ctx.Clone(),
		order:      append([]OrderFunc{}, mfq.order...),
		inters:     append([]Interceptor{}, mfq.inters...),
		predicates: append([]predicate.MagicFlow{}, mfq.predicates...),
		// clone intermediate query.
		sql:  mfq.sql.Clone(),
		path: mfq.path,
	}
}

// GroupBy is used to group vertices by one or more fields/columns.
// It is often used with aggregate functions, like: count, max, mean, min, sum.
//
// Example:
//
//	var v []struct {
//		CreatedAt time.Time `json:"created_at,omitempty"`
//		Count int `json:"count,omitempty"`
//	}
//
//	client.MagicFlow.Query().
//		GroupBy(magicflow.FieldCreatedAt).
//		Aggregate(ent.Count()).
//		Scan(ctx, &v)
func (mfq *MagicFlowQuery) GroupBy(field string, fields ...string) *MagicFlowGroupBy {
	mfq.ctx.Fields = append([]string{field}, fields...)
	grbuild := &MagicFlowGroupBy{build: mfq}
	grbuild.flds = &mfq.ctx.Fields
	grbuild.label = magicflow.Label
	grbuild.scan = grbuild.Scan
	return grbuild
}

// Select allows the selection one or more fields/columns for the given query,
// instead of selecting all fields in the entity.
//
// Example:
//
//	var v []struct {
//		CreatedAt time.Time `json:"created_at,omitempty"`
//	}
//
//	client.MagicFlow.Query().
//		Select(magicflow.FieldCreatedAt).
//		Scan(ctx, &v)
func (mfq *MagicFlowQuery) Select(fields ...string) *MagicFlowSelect {
	mfq.ctx.Fields = append(mfq.ctx.Fields, fields...)
	sbuild := &MagicFlowSelect{MagicFlowQuery: mfq}
	sbuild.label = magicflow.Label
	sbuild.flds, sbuild.scan = &mfq.ctx.Fields, sbuild.Scan
	return sbuild
}

// Aggregate returns a MagicFlowSelect configured with the given aggregations.
func (mfq *MagicFlowQuery) Aggregate(fns ...AggregateFunc) *MagicFlowSelect {
	return mfq.Select().Aggregate(fns...)
}

func (mfq *MagicFlowQuery) prepareQuery(ctx context.Context) error {
	for _, inter := range mfq.inters {
		if inter == nil {
			return fmt.Errorf("ent: uninitialized interceptor (forgotten import ent/runtime?)")
		}
		if trv, ok := inter.(Traverser); ok {
			if err := trv.Traverse(ctx, mfq); err != nil {
				return err
			}
		}
	}
	for _, f := range mfq.ctx.Fields {
		if !magicflow.ValidColumn(f) {
			return &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
		}
	}
	if mfq.path != nil {
		prev, err := mfq.path(ctx)
		if err != nil {
			return err
		}
		mfq.sql = prev
	}
	return nil
}

func (mfq *MagicFlowQuery) sqlAll(ctx context.Context, hooks ...queryHook) ([]*MagicFlow, error) {
	var (
		nodes = []*MagicFlow{}
		_spec = mfq.querySpec()
	)
	_spec.ScanValues = func(columns []string) ([]any, error) {
		return (*MagicFlow).scanValues(nil, columns)
	}
	_spec.Assign = func(columns []string, values []any) error {
		node := &MagicFlow{config: mfq.config}
		nodes = append(nodes, node)
		return node.assignValues(columns, values)
	}
	for i := range hooks {
		hooks[i](ctx, _spec)
	}
	if err := sqlgraph.QueryNodes(ctx, mfq.driver, _spec); err != nil {
		return nil, err
	}
	if len(nodes) == 0 {
		return nodes, nil
	}
	return nodes, nil
}

func (mfq *MagicFlowQuery) sqlCount(ctx context.Context) (int, error) {
	_spec := mfq.querySpec()
	_spec.Node.Columns = mfq.ctx.Fields
	if len(mfq.ctx.Fields) > 0 {
		_spec.Unique = mfq.ctx.Unique != nil && *mfq.ctx.Unique
	}
	return sqlgraph.CountNodes(ctx, mfq.driver, _spec)
}

func (mfq *MagicFlowQuery) querySpec() *sqlgraph.QuerySpec {
	_spec := &sqlgraph.QuerySpec{
		Node: &sqlgraph.NodeSpec{
			Table:   magicflow.Table,
			Columns: magicflow.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt,
				Column: magicflow.FieldID,
			},
		},
		From:   mfq.sql,
		Unique: true,
	}
	if unique := mfq.ctx.Unique; unique != nil {
		_spec.Unique = *unique
	}
	if fields := mfq.ctx.Fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, magicflow.FieldID)
		for i := range fields {
			if fields[i] != magicflow.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, fields[i])
			}
		}
	}
	if ps := mfq.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if limit := mfq.ctx.Limit; limit != nil {
		_spec.Limit = *limit
	}
	if offset := mfq.ctx.Offset; offset != nil {
		_spec.Offset = *offset
	}
	if ps := mfq.order; len(ps) > 0 {
		_spec.Order = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	return _spec
}

func (mfq *MagicFlowQuery) sqlQuery(ctx context.Context) *sql.Selector {
	builder := sql.Dialect(mfq.driver.Dialect())
	t1 := builder.Table(magicflow.Table)
	columns := mfq.ctx.Fields
	if len(columns) == 0 {
		columns = magicflow.Columns
	}
	selector := builder.Select(t1.Columns(columns...)...).From(t1)
	if mfq.sql != nil {
		selector = mfq.sql
		selector.Select(selector.Columns(columns...)...)
	}
	if mfq.ctx.Unique != nil && *mfq.ctx.Unique {
		selector.Distinct()
	}
	for _, p := range mfq.predicates {
		p(selector)
	}
	for _, p := range mfq.order {
		p(selector)
	}
	if offset := mfq.ctx.Offset; offset != nil {
		// limit is mandatory for offset clause. We start
		// with default value, and override it below if needed.
		selector.Offset(*offset).Limit(math.MaxInt32)
	}
	if limit := mfq.ctx.Limit; limit != nil {
		selector.Limit(*limit)
	}
	return selector
}

// MagicFlowGroupBy is the group-by builder for MagicFlow entities.
type MagicFlowGroupBy struct {
	selector
	build *MagicFlowQuery
}

// Aggregate adds the given aggregation functions to the group-by query.
func (mfgb *MagicFlowGroupBy) Aggregate(fns ...AggregateFunc) *MagicFlowGroupBy {
	mfgb.fns = append(mfgb.fns, fns...)
	return mfgb
}

// Scan applies the selector query and scans the result into the given value.
func (mfgb *MagicFlowGroupBy) Scan(ctx context.Context, v any) error {
	ctx = setContextOp(ctx, mfgb.build.ctx, "GroupBy")
	if err := mfgb.build.prepareQuery(ctx); err != nil {
		return err
	}
	return scanWithInterceptors[*MagicFlowQuery, *MagicFlowGroupBy](ctx, mfgb.build, mfgb, mfgb.build.inters, v)
}

func (mfgb *MagicFlowGroupBy) sqlScan(ctx context.Context, root *MagicFlowQuery, v any) error {
	selector := root.sqlQuery(ctx).Select()
	aggregation := make([]string, 0, len(mfgb.fns))
	for _, fn := range mfgb.fns {
		aggregation = append(aggregation, fn(selector))
	}
	if len(selector.SelectedColumns()) == 0 {
		columns := make([]string, 0, len(*mfgb.flds)+len(mfgb.fns))
		for _, f := range *mfgb.flds {
			columns = append(columns, selector.C(f))
		}
		columns = append(columns, aggregation...)
		selector.Select(columns...)
	}
	selector.GroupBy(selector.Columns(*mfgb.flds...)...)
	if err := selector.Err(); err != nil {
		return err
	}
	rows := &sql.Rows{}
	query, args := selector.Query()
	if err := mfgb.build.driver.Query(ctx, query, args, rows); err != nil {
		return err
	}
	defer rows.Close()
	return sql.ScanSlice(rows, v)
}

// MagicFlowSelect is the builder for selecting fields of MagicFlow entities.
type MagicFlowSelect struct {
	*MagicFlowQuery
	selector
}

// Aggregate adds the given aggregation functions to the selector query.
func (mfs *MagicFlowSelect) Aggregate(fns ...AggregateFunc) *MagicFlowSelect {
	mfs.fns = append(mfs.fns, fns...)
	return mfs
}

// Scan applies the selector query and scans the result into the given value.
func (mfs *MagicFlowSelect) Scan(ctx context.Context, v any) error {
	ctx = setContextOp(ctx, mfs.ctx, "Select")
	if err := mfs.prepareQuery(ctx); err != nil {
		return err
	}
	return scanWithInterceptors[*MagicFlowQuery, *MagicFlowSelect](ctx, mfs.MagicFlowQuery, mfs, mfs.inters, v)
}

func (mfs *MagicFlowSelect) sqlScan(ctx context.Context, root *MagicFlowQuery, v any) error {
	selector := root.sqlQuery(ctx)
	aggregation := make([]string, 0, len(mfs.fns))
	for _, fn := range mfs.fns {
		aggregation = append(aggregation, fn(selector))
	}
	switch n := len(*mfs.selector.flds); {
	case n == 0 && len(aggregation) > 0:
		selector.Select(aggregation...)
	case n != 0 && len(aggregation) > 0:
		selector.AppendSelect(aggregation...)
	}
	rows := &sql.Rows{}
	query, args := selector.Query()
	if err := mfs.driver.Query(ctx, query, args, rows); err != nil {
		return err
	}
	defer rows.Close()
	return sql.ScanSlice(rows, v)
}
