/*
	Copyright 2023 Loophole Labs

	Licensed under the Apache License, Version 2.0 (the "License");
	you may not use this file except in compliance with the License.
	You may obtain a copy of the License at

		   http://www.apache.org/licenses/LICENSE-2.0

	Unless required by applicable law or agreed to in writing, software
	distributed under the License is distributed on an "AS IS" BASIS,
	WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
	See the License for the specific language governing permissions and
	limitations under the License.
*/

// Code generated by ent, DO NOT EDIT.

package magicflow

import (
	"time"

	"entgo.io/ent/dialect/sql"
)

const (
	// Label holds the string label denoting the magicflow type in the database.
	Label = "magic_flow"
	// FieldID holds the string denoting the id field in the database.
	FieldID = "id"
	// FieldCreatedAt holds the string denoting the created_at field in the database.
	FieldCreatedAt = "created_at"
	// FieldEmail holds the string denoting the email field in the database.
	FieldEmail = "email"
	// FieldIPAddress holds the string denoting the ip_address field in the database.
	FieldIPAddress = "ip_address"
	// FieldSecret holds the string denoting the secret field in the database.
	FieldSecret = "secret"
	// FieldNextURL holds the string denoting the next_url field in the database.
	FieldNextURL = "next_url"
	// FieldOrganization holds the string denoting the organization field in the database.
	FieldOrganization = "organization"
	// FieldDeviceIdentifier holds the string denoting the device_identifier field in the database.
	FieldDeviceIdentifier = "device_identifier"
	// Table holds the table name of the magicflow in the database.
	Table = "magic_flows"
)

// Columns holds all SQL columns for magicflow fields.
var Columns = []string{
	FieldID,
	FieldCreatedAt,
	FieldEmail,
	FieldIPAddress,
	FieldSecret,
	FieldNextURL,
	FieldOrganization,
	FieldDeviceIdentifier,
}

// ValidColumn reports if the column name is valid (part of the table columns).
func ValidColumn(column string) bool {
	for i := range Columns {
		if column == Columns[i] {
			return true
		}
	}
	return false
}

var (
	// DefaultCreatedAt holds the default value on creation for the "created_at" field.
	DefaultCreatedAt func() time.Time
	// EmailValidator is a validator for the "email" field. It is called by the builders before save.
	EmailValidator func(string) error
	// IPAddressValidator is a validator for the "ip_address" field. It is called by the builders before save.
	IPAddressValidator func(string) error
	// SecretValidator is a validator for the "secret" field. It is called by the builders before save.
	SecretValidator func(string) error
	// NextURLValidator is a validator for the "next_url" field. It is called by the builders before save.
	NextURLValidator func(string) error
)

// OrderOption defines the ordering options for the MagicFlow queries.
type OrderOption func(*sql.Selector)

// ByID orders the results by the id field.
func ByID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldID, opts...).ToFunc()
}

// ByCreatedAt orders the results by the created_at field.
func ByCreatedAt(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldCreatedAt, opts...).ToFunc()
}

// ByEmail orders the results by the email field.
func ByEmail(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldEmail, opts...).ToFunc()
}

// ByIPAddress orders the results by the ip_address field.
func ByIPAddress(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldIPAddress, opts...).ToFunc()
}

// BySecret orders the results by the secret field.
func BySecret(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldSecret, opts...).ToFunc()
}

// ByNextURL orders the results by the next_url field.
func ByNextURL(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldNextURL, opts...).ToFunc()
}

// ByOrganization orders the results by the organization field.
func ByOrganization(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldOrganization, opts...).ToFunc()
}

// ByDeviceIdentifier orders the results by the device_identifier field.
func ByDeviceIdentifier(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldDeviceIdentifier, opts...).ToFunc()
}
