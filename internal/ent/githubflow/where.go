/*
	Copyright 2023 Loophole Labs

	Licensed under the Apache License, Version 2.0 (the "License");
	you may not use this file except in compliance with the License.
	You may obtain a copy of the License at

		   http://www.apache.org/licenses/LICENSE-2.0

	Unless required by applicable law or agreed to in writing, software
	distributed under the License is distributed on an "AS IS" BASIS,
	WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
	See the License for the specific language governing permissions and
	limitations under the License.
*/

// Code generated by ent, DO NOT EDIT.

package githubflow

import (
	"time"

	"entgo.io/ent/dialect/sql"
	"github.com/loopholelabs/auth/internal/ent/predicate"
)

// ID filters vertices based on their ID field.
func ID(id int) predicate.GithubFlow {
	return predicate.GithubFlow(sql.FieldEQ(FieldID, id))
}

// IDEQ applies the EQ predicate on the ID field.
func IDEQ(id int) predicate.GithubFlow {
	return predicate.GithubFlow(sql.FieldEQ(FieldID, id))
}

// IDNEQ applies the NEQ predicate on the ID field.
func IDNEQ(id int) predicate.GithubFlow {
	return predicate.GithubFlow(sql.FieldNEQ(FieldID, id))
}

// IDIn applies the In predicate on the ID field.
func IDIn(ids ...int) predicate.GithubFlow {
	return predicate.GithubFlow(sql.FieldIn(FieldID, ids...))
}

// IDNotIn applies the NotIn predicate on the ID field.
func IDNotIn(ids ...int) predicate.GithubFlow {
	return predicate.GithubFlow(sql.FieldNotIn(FieldID, ids...))
}

// IDGT applies the GT predicate on the ID field.
func IDGT(id int) predicate.GithubFlow {
	return predicate.GithubFlow(sql.FieldGT(FieldID, id))
}

// IDGTE applies the GTE predicate on the ID field.
func IDGTE(id int) predicate.GithubFlow {
	return predicate.GithubFlow(sql.FieldGTE(FieldID, id))
}

// IDLT applies the LT predicate on the ID field.
func IDLT(id int) predicate.GithubFlow {
	return predicate.GithubFlow(sql.FieldLT(FieldID, id))
}

// IDLTE applies the LTE predicate on the ID field.
func IDLTE(id int) predicate.GithubFlow {
	return predicate.GithubFlow(sql.FieldLTE(FieldID, id))
}

// CreatedAt applies equality check predicate on the "created_at" field. It's identical to CreatedAtEQ.
func CreatedAt(v time.Time) predicate.GithubFlow {
	return predicate.GithubFlow(sql.FieldEQ(FieldCreatedAt, v))
}

// State applies equality check predicate on the "state" field. It's identical to StateEQ.
func State(v string) predicate.GithubFlow {
	return predicate.GithubFlow(sql.FieldEQ(FieldState, v))
}

// Verifier applies equality check predicate on the "verifier" field. It's identical to VerifierEQ.
func Verifier(v string) predicate.GithubFlow {
	return predicate.GithubFlow(sql.FieldEQ(FieldVerifier, v))
}

// Challenge applies equality check predicate on the "challenge" field. It's identical to ChallengeEQ.
func Challenge(v string) predicate.GithubFlow {
	return predicate.GithubFlow(sql.FieldEQ(FieldChallenge, v))
}

// NextURL applies equality check predicate on the "next_url" field. It's identical to NextURLEQ.
func NextURL(v string) predicate.GithubFlow {
	return predicate.GithubFlow(sql.FieldEQ(FieldNextURL, v))
}

// Organization applies equality check predicate on the "organization" field. It's identical to OrganizationEQ.
func Organization(v string) predicate.GithubFlow {
	return predicate.GithubFlow(sql.FieldEQ(FieldOrganization, v))
}

// DeviceIdentifier applies equality check predicate on the "device_identifier" field. It's identical to DeviceIdentifierEQ.
func DeviceIdentifier(v string) predicate.GithubFlow {
	return predicate.GithubFlow(sql.FieldEQ(FieldDeviceIdentifier, v))
}

// CreatedAtEQ applies the EQ predicate on the "created_at" field.
func CreatedAtEQ(v time.Time) predicate.GithubFlow {
	return predicate.GithubFlow(sql.FieldEQ(FieldCreatedAt, v))
}

// CreatedAtNEQ applies the NEQ predicate on the "created_at" field.
func CreatedAtNEQ(v time.Time) predicate.GithubFlow {
	return predicate.GithubFlow(sql.FieldNEQ(FieldCreatedAt, v))
}

// CreatedAtIn applies the In predicate on the "created_at" field.
func CreatedAtIn(vs ...time.Time) predicate.GithubFlow {
	return predicate.GithubFlow(sql.FieldIn(FieldCreatedAt, vs...))
}

// CreatedAtNotIn applies the NotIn predicate on the "created_at" field.
func CreatedAtNotIn(vs ...time.Time) predicate.GithubFlow {
	return predicate.GithubFlow(sql.FieldNotIn(FieldCreatedAt, vs...))
}

// CreatedAtGT applies the GT predicate on the "created_at" field.
func CreatedAtGT(v time.Time) predicate.GithubFlow {
	return predicate.GithubFlow(sql.FieldGT(FieldCreatedAt, v))
}

// CreatedAtGTE applies the GTE predicate on the "created_at" field.
func CreatedAtGTE(v time.Time) predicate.GithubFlow {
	return predicate.GithubFlow(sql.FieldGTE(FieldCreatedAt, v))
}

// CreatedAtLT applies the LT predicate on the "created_at" field.
func CreatedAtLT(v time.Time) predicate.GithubFlow {
	return predicate.GithubFlow(sql.FieldLT(FieldCreatedAt, v))
}

// CreatedAtLTE applies the LTE predicate on the "created_at" field.
func CreatedAtLTE(v time.Time) predicate.GithubFlow {
	return predicate.GithubFlow(sql.FieldLTE(FieldCreatedAt, v))
}

// StateEQ applies the EQ predicate on the "state" field.
func StateEQ(v string) predicate.GithubFlow {
	return predicate.GithubFlow(sql.FieldEQ(FieldState, v))
}

// StateNEQ applies the NEQ predicate on the "state" field.
func StateNEQ(v string) predicate.GithubFlow {
	return predicate.GithubFlow(sql.FieldNEQ(FieldState, v))
}

// StateIn applies the In predicate on the "state" field.
func StateIn(vs ...string) predicate.GithubFlow {
	return predicate.GithubFlow(sql.FieldIn(FieldState, vs...))
}

// StateNotIn applies the NotIn predicate on the "state" field.
func StateNotIn(vs ...string) predicate.GithubFlow {
	return predicate.GithubFlow(sql.FieldNotIn(FieldState, vs...))
}

// StateGT applies the GT predicate on the "state" field.
func StateGT(v string) predicate.GithubFlow {
	return predicate.GithubFlow(sql.FieldGT(FieldState, v))
}

// StateGTE applies the GTE predicate on the "state" field.
func StateGTE(v string) predicate.GithubFlow {
	return predicate.GithubFlow(sql.FieldGTE(FieldState, v))
}

// StateLT applies the LT predicate on the "state" field.
func StateLT(v string) predicate.GithubFlow {
	return predicate.GithubFlow(sql.FieldLT(FieldState, v))
}

// StateLTE applies the LTE predicate on the "state" field.
func StateLTE(v string) predicate.GithubFlow {
	return predicate.GithubFlow(sql.FieldLTE(FieldState, v))
}

// StateContains applies the Contains predicate on the "state" field.
func StateContains(v string) predicate.GithubFlow {
	return predicate.GithubFlow(sql.FieldContains(FieldState, v))
}

// StateHasPrefix applies the HasPrefix predicate on the "state" field.
func StateHasPrefix(v string) predicate.GithubFlow {
	return predicate.GithubFlow(sql.FieldHasPrefix(FieldState, v))
}

// StateHasSuffix applies the HasSuffix predicate on the "state" field.
func StateHasSuffix(v string) predicate.GithubFlow {
	return predicate.GithubFlow(sql.FieldHasSuffix(FieldState, v))
}

// StateEqualFold applies the EqualFold predicate on the "state" field.
func StateEqualFold(v string) predicate.GithubFlow {
	return predicate.GithubFlow(sql.FieldEqualFold(FieldState, v))
}

// StateContainsFold applies the ContainsFold predicate on the "state" field.
func StateContainsFold(v string) predicate.GithubFlow {
	return predicate.GithubFlow(sql.FieldContainsFold(FieldState, v))
}

// VerifierEQ applies the EQ predicate on the "verifier" field.
func VerifierEQ(v string) predicate.GithubFlow {
	return predicate.GithubFlow(sql.FieldEQ(FieldVerifier, v))
}

// VerifierNEQ applies the NEQ predicate on the "verifier" field.
func VerifierNEQ(v string) predicate.GithubFlow {
	return predicate.GithubFlow(sql.FieldNEQ(FieldVerifier, v))
}

// VerifierIn applies the In predicate on the "verifier" field.
func VerifierIn(vs ...string) predicate.GithubFlow {
	return predicate.GithubFlow(sql.FieldIn(FieldVerifier, vs...))
}

// VerifierNotIn applies the NotIn predicate on the "verifier" field.
func VerifierNotIn(vs ...string) predicate.GithubFlow {
	return predicate.GithubFlow(sql.FieldNotIn(FieldVerifier, vs...))
}

// VerifierGT applies the GT predicate on the "verifier" field.
func VerifierGT(v string) predicate.GithubFlow {
	return predicate.GithubFlow(sql.FieldGT(FieldVerifier, v))
}

// VerifierGTE applies the GTE predicate on the "verifier" field.
func VerifierGTE(v string) predicate.GithubFlow {
	return predicate.GithubFlow(sql.FieldGTE(FieldVerifier, v))
}

// VerifierLT applies the LT predicate on the "verifier" field.
func VerifierLT(v string) predicate.GithubFlow {
	return predicate.GithubFlow(sql.FieldLT(FieldVerifier, v))
}

// VerifierLTE applies the LTE predicate on the "verifier" field.
func VerifierLTE(v string) predicate.GithubFlow {
	return predicate.GithubFlow(sql.FieldLTE(FieldVerifier, v))
}

// VerifierContains applies the Contains predicate on the "verifier" field.
func VerifierContains(v string) predicate.GithubFlow {
	return predicate.GithubFlow(sql.FieldContains(FieldVerifier, v))
}

// VerifierHasPrefix applies the HasPrefix predicate on the "verifier" field.
func VerifierHasPrefix(v string) predicate.GithubFlow {
	return predicate.GithubFlow(sql.FieldHasPrefix(FieldVerifier, v))
}

// VerifierHasSuffix applies the HasSuffix predicate on the "verifier" field.
func VerifierHasSuffix(v string) predicate.GithubFlow {
	return predicate.GithubFlow(sql.FieldHasSuffix(FieldVerifier, v))
}

// VerifierEqualFold applies the EqualFold predicate on the "verifier" field.
func VerifierEqualFold(v string) predicate.GithubFlow {
	return predicate.GithubFlow(sql.FieldEqualFold(FieldVerifier, v))
}

// VerifierContainsFold applies the ContainsFold predicate on the "verifier" field.
func VerifierContainsFold(v string) predicate.GithubFlow {
	return predicate.GithubFlow(sql.FieldContainsFold(FieldVerifier, v))
}

// ChallengeEQ applies the EQ predicate on the "challenge" field.
func ChallengeEQ(v string) predicate.GithubFlow {
	return predicate.GithubFlow(sql.FieldEQ(FieldChallenge, v))
}

// ChallengeNEQ applies the NEQ predicate on the "challenge" field.
func ChallengeNEQ(v string) predicate.GithubFlow {
	return predicate.GithubFlow(sql.FieldNEQ(FieldChallenge, v))
}

// ChallengeIn applies the In predicate on the "challenge" field.
func ChallengeIn(vs ...string) predicate.GithubFlow {
	return predicate.GithubFlow(sql.FieldIn(FieldChallenge, vs...))
}

// ChallengeNotIn applies the NotIn predicate on the "challenge" field.
func ChallengeNotIn(vs ...string) predicate.GithubFlow {
	return predicate.GithubFlow(sql.FieldNotIn(FieldChallenge, vs...))
}

// ChallengeGT applies the GT predicate on the "challenge" field.
func ChallengeGT(v string) predicate.GithubFlow {
	return predicate.GithubFlow(sql.FieldGT(FieldChallenge, v))
}

// ChallengeGTE applies the GTE predicate on the "challenge" field.
func ChallengeGTE(v string) predicate.GithubFlow {
	return predicate.GithubFlow(sql.FieldGTE(FieldChallenge, v))
}

// ChallengeLT applies the LT predicate on the "challenge" field.
func ChallengeLT(v string) predicate.GithubFlow {
	return predicate.GithubFlow(sql.FieldLT(FieldChallenge, v))
}

// ChallengeLTE applies the LTE predicate on the "challenge" field.
func ChallengeLTE(v string) predicate.GithubFlow {
	return predicate.GithubFlow(sql.FieldLTE(FieldChallenge, v))
}

// ChallengeContains applies the Contains predicate on the "challenge" field.
func ChallengeContains(v string) predicate.GithubFlow {
	return predicate.GithubFlow(sql.FieldContains(FieldChallenge, v))
}

// ChallengeHasPrefix applies the HasPrefix predicate on the "challenge" field.
func ChallengeHasPrefix(v string) predicate.GithubFlow {
	return predicate.GithubFlow(sql.FieldHasPrefix(FieldChallenge, v))
}

// ChallengeHasSuffix applies the HasSuffix predicate on the "challenge" field.
func ChallengeHasSuffix(v string) predicate.GithubFlow {
	return predicate.GithubFlow(sql.FieldHasSuffix(FieldChallenge, v))
}

// ChallengeEqualFold applies the EqualFold predicate on the "challenge" field.
func ChallengeEqualFold(v string) predicate.GithubFlow {
	return predicate.GithubFlow(sql.FieldEqualFold(FieldChallenge, v))
}

// ChallengeContainsFold applies the ContainsFold predicate on the "challenge" field.
func ChallengeContainsFold(v string) predicate.GithubFlow {
	return predicate.GithubFlow(sql.FieldContainsFold(FieldChallenge, v))
}

// NextURLEQ applies the EQ predicate on the "next_url" field.
func NextURLEQ(v string) predicate.GithubFlow {
	return predicate.GithubFlow(sql.FieldEQ(FieldNextURL, v))
}

// NextURLNEQ applies the NEQ predicate on the "next_url" field.
func NextURLNEQ(v string) predicate.GithubFlow {
	return predicate.GithubFlow(sql.FieldNEQ(FieldNextURL, v))
}

// NextURLIn applies the In predicate on the "next_url" field.
func NextURLIn(vs ...string) predicate.GithubFlow {
	return predicate.GithubFlow(sql.FieldIn(FieldNextURL, vs...))
}

// NextURLNotIn applies the NotIn predicate on the "next_url" field.
func NextURLNotIn(vs ...string) predicate.GithubFlow {
	return predicate.GithubFlow(sql.FieldNotIn(FieldNextURL, vs...))
}

// NextURLGT applies the GT predicate on the "next_url" field.
func NextURLGT(v string) predicate.GithubFlow {
	return predicate.GithubFlow(sql.FieldGT(FieldNextURL, v))
}

// NextURLGTE applies the GTE predicate on the "next_url" field.
func NextURLGTE(v string) predicate.GithubFlow {
	return predicate.GithubFlow(sql.FieldGTE(FieldNextURL, v))
}

// NextURLLT applies the LT predicate on the "next_url" field.
func NextURLLT(v string) predicate.GithubFlow {
	return predicate.GithubFlow(sql.FieldLT(FieldNextURL, v))
}

// NextURLLTE applies the LTE predicate on the "next_url" field.
func NextURLLTE(v string) predicate.GithubFlow {
	return predicate.GithubFlow(sql.FieldLTE(FieldNextURL, v))
}

// NextURLContains applies the Contains predicate on the "next_url" field.
func NextURLContains(v string) predicate.GithubFlow {
	return predicate.GithubFlow(sql.FieldContains(FieldNextURL, v))
}

// NextURLHasPrefix applies the HasPrefix predicate on the "next_url" field.
func NextURLHasPrefix(v string) predicate.GithubFlow {
	return predicate.GithubFlow(sql.FieldHasPrefix(FieldNextURL, v))
}

// NextURLHasSuffix applies the HasSuffix predicate on the "next_url" field.
func NextURLHasSuffix(v string) predicate.GithubFlow {
	return predicate.GithubFlow(sql.FieldHasSuffix(FieldNextURL, v))
}

// NextURLEqualFold applies the EqualFold predicate on the "next_url" field.
func NextURLEqualFold(v string) predicate.GithubFlow {
	return predicate.GithubFlow(sql.FieldEqualFold(FieldNextURL, v))
}

// NextURLContainsFold applies the ContainsFold predicate on the "next_url" field.
func NextURLContainsFold(v string) predicate.GithubFlow {
	return predicate.GithubFlow(sql.FieldContainsFold(FieldNextURL, v))
}

// OrganizationEQ applies the EQ predicate on the "organization" field.
func OrganizationEQ(v string) predicate.GithubFlow {
	return predicate.GithubFlow(sql.FieldEQ(FieldOrganization, v))
}

// OrganizationNEQ applies the NEQ predicate on the "organization" field.
func OrganizationNEQ(v string) predicate.GithubFlow {
	return predicate.GithubFlow(sql.FieldNEQ(FieldOrganization, v))
}

// OrganizationIn applies the In predicate on the "organization" field.
func OrganizationIn(vs ...string) predicate.GithubFlow {
	return predicate.GithubFlow(sql.FieldIn(FieldOrganization, vs...))
}

// OrganizationNotIn applies the NotIn predicate on the "organization" field.
func OrganizationNotIn(vs ...string) predicate.GithubFlow {
	return predicate.GithubFlow(sql.FieldNotIn(FieldOrganization, vs...))
}

// OrganizationGT applies the GT predicate on the "organization" field.
func OrganizationGT(v string) predicate.GithubFlow {
	return predicate.GithubFlow(sql.FieldGT(FieldOrganization, v))
}

// OrganizationGTE applies the GTE predicate on the "organization" field.
func OrganizationGTE(v string) predicate.GithubFlow {
	return predicate.GithubFlow(sql.FieldGTE(FieldOrganization, v))
}

// OrganizationLT applies the LT predicate on the "organization" field.
func OrganizationLT(v string) predicate.GithubFlow {
	return predicate.GithubFlow(sql.FieldLT(FieldOrganization, v))
}

// OrganizationLTE applies the LTE predicate on the "organization" field.
func OrganizationLTE(v string) predicate.GithubFlow {
	return predicate.GithubFlow(sql.FieldLTE(FieldOrganization, v))
}

// OrganizationContains applies the Contains predicate on the "organization" field.
func OrganizationContains(v string) predicate.GithubFlow {
	return predicate.GithubFlow(sql.FieldContains(FieldOrganization, v))
}

// OrganizationHasPrefix applies the HasPrefix predicate on the "organization" field.
func OrganizationHasPrefix(v string) predicate.GithubFlow {
	return predicate.GithubFlow(sql.FieldHasPrefix(FieldOrganization, v))
}

// OrganizationHasSuffix applies the HasSuffix predicate on the "organization" field.
func OrganizationHasSuffix(v string) predicate.GithubFlow {
	return predicate.GithubFlow(sql.FieldHasSuffix(FieldOrganization, v))
}

// OrganizationIsNil applies the IsNil predicate on the "organization" field.
func OrganizationIsNil() predicate.GithubFlow {
	return predicate.GithubFlow(sql.FieldIsNull(FieldOrganization))
}

// OrganizationNotNil applies the NotNil predicate on the "organization" field.
func OrganizationNotNil() predicate.GithubFlow {
	return predicate.GithubFlow(sql.FieldNotNull(FieldOrganization))
}

// OrganizationEqualFold applies the EqualFold predicate on the "organization" field.
func OrganizationEqualFold(v string) predicate.GithubFlow {
	return predicate.GithubFlow(sql.FieldEqualFold(FieldOrganization, v))
}

// OrganizationContainsFold applies the ContainsFold predicate on the "organization" field.
func OrganizationContainsFold(v string) predicate.GithubFlow {
	return predicate.GithubFlow(sql.FieldContainsFold(FieldOrganization, v))
}

// DeviceIdentifierEQ applies the EQ predicate on the "device_identifier" field.
func DeviceIdentifierEQ(v string) predicate.GithubFlow {
	return predicate.GithubFlow(sql.FieldEQ(FieldDeviceIdentifier, v))
}

// DeviceIdentifierNEQ applies the NEQ predicate on the "device_identifier" field.
func DeviceIdentifierNEQ(v string) predicate.GithubFlow {
	return predicate.GithubFlow(sql.FieldNEQ(FieldDeviceIdentifier, v))
}

// DeviceIdentifierIn applies the In predicate on the "device_identifier" field.
func DeviceIdentifierIn(vs ...string) predicate.GithubFlow {
	return predicate.GithubFlow(sql.FieldIn(FieldDeviceIdentifier, vs...))
}

// DeviceIdentifierNotIn applies the NotIn predicate on the "device_identifier" field.
func DeviceIdentifierNotIn(vs ...string) predicate.GithubFlow {
	return predicate.GithubFlow(sql.FieldNotIn(FieldDeviceIdentifier, vs...))
}

// DeviceIdentifierGT applies the GT predicate on the "device_identifier" field.
func DeviceIdentifierGT(v string) predicate.GithubFlow {
	return predicate.GithubFlow(sql.FieldGT(FieldDeviceIdentifier, v))
}

// DeviceIdentifierGTE applies the GTE predicate on the "device_identifier" field.
func DeviceIdentifierGTE(v string) predicate.GithubFlow {
	return predicate.GithubFlow(sql.FieldGTE(FieldDeviceIdentifier, v))
}

// DeviceIdentifierLT applies the LT predicate on the "device_identifier" field.
func DeviceIdentifierLT(v string) predicate.GithubFlow {
	return predicate.GithubFlow(sql.FieldLT(FieldDeviceIdentifier, v))
}

// DeviceIdentifierLTE applies the LTE predicate on the "device_identifier" field.
func DeviceIdentifierLTE(v string) predicate.GithubFlow {
	return predicate.GithubFlow(sql.FieldLTE(FieldDeviceIdentifier, v))
}

// DeviceIdentifierContains applies the Contains predicate on the "device_identifier" field.
func DeviceIdentifierContains(v string) predicate.GithubFlow {
	return predicate.GithubFlow(sql.FieldContains(FieldDeviceIdentifier, v))
}

// DeviceIdentifierHasPrefix applies the HasPrefix predicate on the "device_identifier" field.
func DeviceIdentifierHasPrefix(v string) predicate.GithubFlow {
	return predicate.GithubFlow(sql.FieldHasPrefix(FieldDeviceIdentifier, v))
}

// DeviceIdentifierHasSuffix applies the HasSuffix predicate on the "device_identifier" field.
func DeviceIdentifierHasSuffix(v string) predicate.GithubFlow {
	return predicate.GithubFlow(sql.FieldHasSuffix(FieldDeviceIdentifier, v))
}

// DeviceIdentifierIsNil applies the IsNil predicate on the "device_identifier" field.
func DeviceIdentifierIsNil() predicate.GithubFlow {
	return predicate.GithubFlow(sql.FieldIsNull(FieldDeviceIdentifier))
}

// DeviceIdentifierNotNil applies the NotNil predicate on the "device_identifier" field.
func DeviceIdentifierNotNil() predicate.GithubFlow {
	return predicate.GithubFlow(sql.FieldNotNull(FieldDeviceIdentifier))
}

// DeviceIdentifierEqualFold applies the EqualFold predicate on the "device_identifier" field.
func DeviceIdentifierEqualFold(v string) predicate.GithubFlow {
	return predicate.GithubFlow(sql.FieldEqualFold(FieldDeviceIdentifier, v))
}

// DeviceIdentifierContainsFold applies the ContainsFold predicate on the "device_identifier" field.
func DeviceIdentifierContainsFold(v string) predicate.GithubFlow {
	return predicate.GithubFlow(sql.FieldContainsFold(FieldDeviceIdentifier, v))
}

// And groups predicates with the AND operator between them.
func And(predicates ...predicate.GithubFlow) predicate.GithubFlow {
	return predicate.GithubFlow(func(s *sql.Selector) {
		s1 := s.Clone().SetP(nil)
		for _, p := range predicates {
			p(s1)
		}
		s.Where(s1.P())
	})
}

// Or groups predicates with the OR operator between them.
func Or(predicates ...predicate.GithubFlow) predicate.GithubFlow {
	return predicate.GithubFlow(func(s *sql.Selector) {
		s1 := s.Clone().SetP(nil)
		for i, p := range predicates {
			if i > 0 {
				s1.Or()
			}
			p(s1)
		}
		s.Where(s1.P())
	})
}

// Not applies the not operator on the given predicate.
func Not(p predicate.GithubFlow) predicate.GithubFlow {
	return predicate.GithubFlow(func(s *sql.Selector) {
		p(s.Not())
	})
}
