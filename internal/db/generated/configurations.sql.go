// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.29.0
// source: configurations.sql

package generated

import (
	"context"
)

const getAllConfigurations = `-- name: GetAllConfigurations :many
SELECT configuration_key, configuration_value, updated_at
FROM configurations
`

func (q *Queries) GetAllConfigurations(ctx context.Context) ([]Configuration, error) {
	rows, err := q.db.QueryContext(ctx, getAllConfigurations)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Configuration
	for rows.Next() {
		var i Configuration
		if err := rows.Scan(&i.ConfigurationKey, &i.ConfigurationValue, &i.UpdatedAt); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getConfigurationByKey = `-- name: GetConfigurationByKey :one
SELECT configuration_key, configuration_value, updated_at
FROM configurations
WHERE configuration_key = ? LIMIT 1
`

func (q *Queries) GetConfigurationByKey(ctx context.Context, configurationKey string) (Configuration, error) {
	row := q.db.QueryRowContext(ctx, getConfigurationByKey, configurationKey)
	var i Configuration
	err := row.Scan(&i.ConfigurationKey, &i.ConfigurationValue, &i.UpdatedAt)
	return i, err
}

const setConfiguration = `-- name: SetConfiguration :exec
INSERT INTO configurations (configuration_key, configuration_value, updated_at)
VALUES (?, ?, CURRENT_TIMESTAMP)
`

type SetConfigurationParams struct {
	ConfigurationKey   string
	ConfigurationValue string
}

func (q *Queries) SetConfiguration(ctx context.Context, arg SetConfigurationParams) error {
	_, err := q.db.ExecContext(ctx, setConfiguration, arg.ConfigurationKey, arg.ConfigurationValue)
	return err
}
