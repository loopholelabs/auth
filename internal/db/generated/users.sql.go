// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.30.0
// source: users.sql

package generated

import (
	"context"

	"github.com/jackc/pgx/v5/pgtype"
)

const createUser = `-- name: CreateUser :exec
INSERT INTO users (identifier, name, primary_email, default_organization_identifier, created_at)
VALUES ($1, $2, LOWER($3), $4,
        CURRENT_TIMESTAMP)
`

type CreateUserParams struct {
	Identifier                    pgtype.UUID
	Name                          string
	PrimaryEmail                  string
	DefaultOrganizationIdentifier pgtype.UUID
}

func (q *Queries) CreateUser(ctx context.Context, arg CreateUserParams) error {
	_, err := q.db.Exec(ctx, createUser,
		arg.Identifier,
		arg.Name,
		arg.PrimaryEmail,
		arg.DefaultOrganizationIdentifier,
	)
	return err
}

const getUserByIdentifier = `-- name: GetUserByIdentifier :one
SELECT identifier, name, primary_email, default_organization_identifier, last_login, created_at
FROM users
WHERE identifier = $1 LIMIT 1
`

func (q *Queries) GetUserByIdentifier(ctx context.Context, identifier pgtype.UUID) (User, error) {
	row := q.db.QueryRow(ctx, getUserByIdentifier, identifier)
	var i User
	err := row.Scan(
		&i.Identifier,
		&i.Name,
		&i.PrimaryEmail,
		&i.DefaultOrganizationIdentifier,
		&i.LastLogin,
		&i.CreatedAt,
	)
	return i, err
}

const updateUserLastLoginByIdentifier = `-- name: UpdateUserLastLoginByIdentifier :execrows
UPDATE users
SET last_login = CURRENT_TIMESTAMP
WHERE identifier = $1
`

func (q *Queries) UpdateUserLastLoginByIdentifier(ctx context.Context, identifier pgtype.UUID) (int64, error) {
	result, err := q.db.Exec(ctx, updateUserLastLoginByIdentifier, identifier)
	if err != nil {
		return 0, err
	}
	return result.RowsAffected(), nil
}

const updateUserNameByIdentifier = `-- name: UpdateUserNameByIdentifier :execrows
UPDATE users
SET name = $1
WHERE identifier = $2
`

type UpdateUserNameByIdentifierParams struct {
	Name       string
	Identifier pgtype.UUID
}

func (q *Queries) UpdateUserNameByIdentifier(ctx context.Context, arg UpdateUserNameByIdentifierParams) (int64, error) {
	result, err := q.db.Exec(ctx, updateUserNameByIdentifier, arg.Name, arg.Identifier)
	if err != nil {
		return 0, err
	}
	return result.RowsAffected(), nil
}

const updateUserPrimaryEmailByIdentifier = `-- name: UpdateUserPrimaryEmailByIdentifier :execrows
UPDATE users
SET primary_email = $1
WHERE identifier = $2
`

type UpdateUserPrimaryEmailByIdentifierParams struct {
	PrimaryEmail string
	Identifier   pgtype.UUID
}

func (q *Queries) UpdateUserPrimaryEmailByIdentifier(ctx context.Context, arg UpdateUserPrimaryEmailByIdentifierParams) (int64, error) {
	result, err := q.db.Exec(ctx, updateUserPrimaryEmailByIdentifier, arg.PrimaryEmail, arg.Identifier)
	if err != nil {
		return 0, err
	}
	return result.RowsAffected(), nil
}
