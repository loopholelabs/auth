// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.29.0
// source: flows.sql

package generated

import (
	"context"
	"database/sql"
	"time"
)

const createGithubOAuthFlow = `-- name: CreateGithubOAuthFlow :exec
INSERT INTO github_oauth_flows (identifier, device_identifier, user_identifier, verifier, challenge, next_url,
                                created_at)
VALUES (?, ?, ?, ?,
        ?, ?, CURRENT_TIMESTAMP)
`

type CreateGithubOAuthFlowParams struct {
	Identifier       string
	DeviceIdentifier sql.NullString
	UserIdentifier   sql.NullString
	Verifier         string
	Challenge        string
	NextUrl          sql.NullString
}

func (q *Queries) CreateGithubOAuthFlow(ctx context.Context, arg CreateGithubOAuthFlowParams) error {
	_, err := q.db.ExecContext(ctx, createGithubOAuthFlow,
		arg.Identifier,
		arg.DeviceIdentifier,
		arg.UserIdentifier,
		arg.Verifier,
		arg.Challenge,
		arg.NextUrl,
	)
	return err
}

const deleteGithubOAuthFlowByIdentifier = `-- name: DeleteGithubOAuthFlowByIdentifier :exec
DELETE
FROM github_oauth_flows
WHERE identifier = ?
`

func (q *Queries) DeleteGithubOAuthFlowByIdentifier(ctx context.Context, identifier string) error {
	_, err := q.db.ExecContext(ctx, deleteGithubOAuthFlowByIdentifier, identifier)
	return err
}

const deleteGithubOAuthFlowsBeforeTime = `-- name: DeleteGithubOAuthFlowsBeforeTime :execrows
DELETE
FROM github_oauth_flows
WHERE created_at < ?
`

func (q *Queries) DeleteGithubOAuthFlowsBeforeTime(ctx context.Context, createdAt time.Time) (int64, error) {
	result, err := q.db.ExecContext(ctx, deleteGithubOAuthFlowsBeforeTime, createdAt)
	if err != nil {
		return 0, err
	}
	return result.RowsAffected()
}

const getGithubOAuthFlowByIdentifier = `-- name: GetGithubOAuthFlowByIdentifier :one
SELECT identifier, verifier, challenge, device_identifier, user_identifier, next_url, created_at
FROM github_oauth_flows
WHERE identifier = ? LIMIT 1
`

func (q *Queries) GetGithubOAuthFlowByIdentifier(ctx context.Context, identifier string) (GithubOauthFlow, error) {
	row := q.db.QueryRowContext(ctx, getGithubOAuthFlowByIdentifier, identifier)
	var i GithubOauthFlow
	err := row.Scan(
		&i.Identifier,
		&i.Verifier,
		&i.Challenge,
		&i.DeviceIdentifier,
		&i.UserIdentifier,
		&i.NextUrl,
		&i.CreatedAt,
	)
	return i, err
}
