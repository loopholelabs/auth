// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.29.0
// source: flows.sql

package generated

import (
	"context"
	"database/sql"
	"time"
)

const countAllDeviceCodeFlows = `-- name: CountAllDeviceCodeFlows :one
SELECT COUNT(*)
FROM device_code_flows
`

func (q *Queries) CountAllDeviceCodeFlows(ctx context.Context) (int64, error) {
	row := q.db.QueryRowContext(ctx, countAllDeviceCodeFlows)
	var count int64
	err := row.Scan(&count)
	return count, err
}

const countAllGithubOAuthFlows = `-- name: CountAllGithubOAuthFlows :one
SELECT COUNT(*)
FROM github_oauth_flows
`

func (q *Queries) CountAllGithubOAuthFlows(ctx context.Context) (int64, error) {
	row := q.db.QueryRowContext(ctx, countAllGithubOAuthFlows)
	var count int64
	err := row.Scan(&count)
	return count, err
}

const countAllGoogleOAuthFlows = `-- name: CountAllGoogleOAuthFlows :one
SELECT COUNT(*)
FROM google_oauth_flows
`

func (q *Queries) CountAllGoogleOAuthFlows(ctx context.Context) (int64, error) {
	row := q.db.QueryRowContext(ctx, countAllGoogleOAuthFlows)
	var count int64
	err := row.Scan(&count)
	return count, err
}

const countAllMagicLinkFlows = `-- name: CountAllMagicLinkFlows :one
SELECT COUNT(*)
FROM magic_link_flows
`

func (q *Queries) CountAllMagicLinkFlows(ctx context.Context) (int64, error) {
	row := q.db.QueryRowContext(ctx, countAllMagicLinkFlows)
	var count int64
	err := row.Scan(&count)
	return count, err
}

const createDeviceCodeFlow = `-- name: CreateDeviceCodeFlow :exec
INSERT INTO device_code_flows (identifier, code, poll, last_poll, created_at)
VALUES (?, ?, ?, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP)
`

type CreateDeviceCodeFlowParams struct {
	Identifier string
	Code       string
	Poll       string
}

func (q *Queries) CreateDeviceCodeFlow(ctx context.Context, arg CreateDeviceCodeFlowParams) error {
	_, err := q.db.ExecContext(ctx, createDeviceCodeFlow, arg.Identifier, arg.Code, arg.Poll)
	return err
}

const createGithubOAuthFlow = `-- name: CreateGithubOAuthFlow :exec
INSERT INTO github_oauth_flows (identifier, device_identifier, user_identifier, verifier, challenge, next_url,
                                created_at)
VALUES (?, ?, ?, ?,
        ?, ?, CURRENT_TIMESTAMP)
`

type CreateGithubOAuthFlowParams struct {
	Identifier       string
	DeviceIdentifier sql.NullString
	UserIdentifier   sql.NullString
	Verifier         string
	Challenge        string
	NextUrl          sql.NullString
}

func (q *Queries) CreateGithubOAuthFlow(ctx context.Context, arg CreateGithubOAuthFlowParams) error {
	_, err := q.db.ExecContext(ctx, createGithubOAuthFlow,
		arg.Identifier,
		arg.DeviceIdentifier,
		arg.UserIdentifier,
		arg.Verifier,
		arg.Challenge,
		arg.NextUrl,
	)
	return err
}

const createGoogleOAuthFlow = `-- name: CreateGoogleOAuthFlow :exec
INSERT INTO google_oauth_flows (identifier, device_identifier, user_identifier, verifier, challenge, next_url,
                                created_at)
VALUES (?, ?, ?, ?,
        ?, ?, CURRENT_TIMESTAMP)
`

type CreateGoogleOAuthFlowParams struct {
	Identifier       string
	DeviceIdentifier sql.NullString
	UserIdentifier   sql.NullString
	Verifier         string
	Challenge        string
	NextUrl          sql.NullString
}

func (q *Queries) CreateGoogleOAuthFlow(ctx context.Context, arg CreateGoogleOAuthFlowParams) error {
	_, err := q.db.ExecContext(ctx, createGoogleOAuthFlow,
		arg.Identifier,
		arg.DeviceIdentifier,
		arg.UserIdentifier,
		arg.Verifier,
		arg.Challenge,
		arg.NextUrl,
	)
	return err
}

const createMagicLinkFlow = `-- name: CreateMagicLinkFlow :exec
INSERT INTO magic_link_flows (identifier, device_identifier, user_identifier, next_url, salt, hash, email_address,
                              created_at)
VALUES (?, ?, ?, ?,
        ?, ?, ?, CURRENT_TIMESTAMP)
`

type CreateMagicLinkFlowParams struct {
	Identifier       string
	DeviceIdentifier sql.NullString
	UserIdentifier   sql.NullString
	NextUrl          sql.NullString
	Salt             string
	Hash             []byte
	EmailAddress     string
}

func (q *Queries) CreateMagicLinkFlow(ctx context.Context, arg CreateMagicLinkFlowParams) error {
	_, err := q.db.ExecContext(ctx, createMagicLinkFlow,
		arg.Identifier,
		arg.DeviceIdentifier,
		arg.UserIdentifier,
		arg.NextUrl,
		arg.Salt,
		arg.Hash,
		arg.EmailAddress,
	)
	return err
}

const deleteAllDeviceCodeFlows = `-- name: DeleteAllDeviceCodeFlows :execrows
DELETE
FROM device_code_flows
`

func (q *Queries) DeleteAllDeviceCodeFlows(ctx context.Context) (int64, error) {
	result, err := q.db.ExecContext(ctx, deleteAllDeviceCodeFlows)
	if err != nil {
		return 0, err
	}
	return result.RowsAffected()
}

const deleteAllGithubOAuthFlows = `-- name: DeleteAllGithubOAuthFlows :execrows
DELETE
FROM github_oauth_flows
`

func (q *Queries) DeleteAllGithubOAuthFlows(ctx context.Context) (int64, error) {
	result, err := q.db.ExecContext(ctx, deleteAllGithubOAuthFlows)
	if err != nil {
		return 0, err
	}
	return result.RowsAffected()
}

const deleteAllGoogleOAuthFlows = `-- name: DeleteAllGoogleOAuthFlows :execrows
DELETE
FROM google_oauth_flows
`

func (q *Queries) DeleteAllGoogleOAuthFlows(ctx context.Context) (int64, error) {
	result, err := q.db.ExecContext(ctx, deleteAllGoogleOAuthFlows)
	if err != nil {
		return 0, err
	}
	return result.RowsAffected()
}

const deleteAllMagicLinkFlows = `-- name: DeleteAllMagicLinkFlows :execrows
DELETE
FROM magic_link_flows
`

func (q *Queries) DeleteAllMagicLinkFlows(ctx context.Context) (int64, error) {
	result, err := q.db.ExecContext(ctx, deleteAllMagicLinkFlows)
	if err != nil {
		return 0, err
	}
	return result.RowsAffected()
}

const deleteDeviceCodeFlowByIdentifier = `-- name: DeleteDeviceCodeFlowByIdentifier :exec
DELETE
FROM device_code_flows
WHERE identifier = ?
`

func (q *Queries) DeleteDeviceCodeFlowByIdentifier(ctx context.Context, identifier string) error {
	_, err := q.db.ExecContext(ctx, deleteDeviceCodeFlowByIdentifier, identifier)
	return err
}

const deleteDeviceCodeFlowsBeforeCreatedAt = `-- name: DeleteDeviceCodeFlowsBeforeCreatedAt :execrows
DELETE
FROM device_code_flows
WHERE created_at < ?
`

func (q *Queries) DeleteDeviceCodeFlowsBeforeCreatedAt(ctx context.Context, createdAt time.Time) (int64, error) {
	result, err := q.db.ExecContext(ctx, deleteDeviceCodeFlowsBeforeCreatedAt, createdAt)
	if err != nil {
		return 0, err
	}
	return result.RowsAffected()
}

const deleteGithubOAuthFlowByIdentifier = `-- name: DeleteGithubOAuthFlowByIdentifier :exec
DELETE
FROM github_oauth_flows
WHERE identifier = ?
`

func (q *Queries) DeleteGithubOAuthFlowByIdentifier(ctx context.Context, identifier string) error {
	_, err := q.db.ExecContext(ctx, deleteGithubOAuthFlowByIdentifier, identifier)
	return err
}

const deleteGithubOAuthFlowsBeforeCreatedAt = `-- name: DeleteGithubOAuthFlowsBeforeCreatedAt :execrows
DELETE
FROM github_oauth_flows
WHERE created_at < ?
`

func (q *Queries) DeleteGithubOAuthFlowsBeforeCreatedAt(ctx context.Context, createdAt time.Time) (int64, error) {
	result, err := q.db.ExecContext(ctx, deleteGithubOAuthFlowsBeforeCreatedAt, createdAt)
	if err != nil {
		return 0, err
	}
	return result.RowsAffected()
}

const deleteGoogleOAuthFlowByIdentifier = `-- name: DeleteGoogleOAuthFlowByIdentifier :exec
DELETE
FROM google_oauth_flows
WHERE identifier = ?
`

func (q *Queries) DeleteGoogleOAuthFlowByIdentifier(ctx context.Context, identifier string) error {
	_, err := q.db.ExecContext(ctx, deleteGoogleOAuthFlowByIdentifier, identifier)
	return err
}

const deleteGoogleOAuthFlowsBeforeCreatedAt = `-- name: DeleteGoogleOAuthFlowsBeforeCreatedAt :execrows
DELETE
FROM google_oauth_flows
WHERE created_at < ?
`

func (q *Queries) DeleteGoogleOAuthFlowsBeforeCreatedAt(ctx context.Context, createdAt time.Time) (int64, error) {
	result, err := q.db.ExecContext(ctx, deleteGoogleOAuthFlowsBeforeCreatedAt, createdAt)
	if err != nil {
		return 0, err
	}
	return result.RowsAffected()
}

const deleteMagicLinkFlowByIdentifier = `-- name: DeleteMagicLinkFlowByIdentifier :exec
DELETE
FROM magic_link_flows
WHERE identifier = ?
`

func (q *Queries) DeleteMagicLinkFlowByIdentifier(ctx context.Context, identifier string) error {
	_, err := q.db.ExecContext(ctx, deleteMagicLinkFlowByIdentifier, identifier)
	return err
}

const deleteMagicLinkFlowsBeforeCreatedAt = `-- name: DeleteMagicLinkFlowsBeforeCreatedAt :execrows
DELETE
FROM magic_link_flows
WHERE created_at < ?
`

func (q *Queries) DeleteMagicLinkFlowsBeforeCreatedAt(ctx context.Context, createdAt time.Time) (int64, error) {
	result, err := q.db.ExecContext(ctx, deleteMagicLinkFlowsBeforeCreatedAt, createdAt)
	if err != nil {
		return 0, err
	}
	return result.RowsAffected()
}

const getDeviceCodeFlowByCode = `-- name: GetDeviceCodeFlowByCode :one
SELECT identifier, session_identifier, code, poll, last_poll, created_at
FROM device_code_flows
WHERE code = ? LIMIT 1
`

func (q *Queries) GetDeviceCodeFlowByCode(ctx context.Context, code string) (DeviceCodeFlow, error) {
	row := q.db.QueryRowContext(ctx, getDeviceCodeFlowByCode, code)
	var i DeviceCodeFlow
	err := row.Scan(
		&i.Identifier,
		&i.SessionIdentifier,
		&i.Code,
		&i.Poll,
		&i.LastPoll,
		&i.CreatedAt,
	)
	return i, err
}

const getDeviceCodeFlowByIdentifier = `-- name: GetDeviceCodeFlowByIdentifier :one
SELECT identifier, session_identifier, code, poll, last_poll, created_at
FROM device_code_flows
WHERE identifier = ? LIMIT 1
`

func (q *Queries) GetDeviceCodeFlowByIdentifier(ctx context.Context, identifier string) (DeviceCodeFlow, error) {
	row := q.db.QueryRowContext(ctx, getDeviceCodeFlowByIdentifier, identifier)
	var i DeviceCodeFlow
	err := row.Scan(
		&i.Identifier,
		&i.SessionIdentifier,
		&i.Code,
		&i.Poll,
		&i.LastPoll,
		&i.CreatedAt,
	)
	return i, err
}

const getDeviceCodeFlowByPoll = `-- name: GetDeviceCodeFlowByPoll :one
SELECT identifier, session_identifier, code, poll, last_poll, created_at
FROM device_code_flows
WHERE poll = ? LIMIT 1
`

func (q *Queries) GetDeviceCodeFlowByPoll(ctx context.Context, poll string) (DeviceCodeFlow, error) {
	row := q.db.QueryRowContext(ctx, getDeviceCodeFlowByPoll, poll)
	var i DeviceCodeFlow
	err := row.Scan(
		&i.Identifier,
		&i.SessionIdentifier,
		&i.Code,
		&i.Poll,
		&i.LastPoll,
		&i.CreatedAt,
	)
	return i, err
}

const getGithubOAuthFlowByIdentifier = `-- name: GetGithubOAuthFlowByIdentifier :one
SELECT identifier, verifier, challenge, device_identifier, user_identifier, next_url, created_at
FROM github_oauth_flows
WHERE identifier = ? LIMIT 1
`

func (q *Queries) GetGithubOAuthFlowByIdentifier(ctx context.Context, identifier string) (GithubOauthFlow, error) {
	row := q.db.QueryRowContext(ctx, getGithubOAuthFlowByIdentifier, identifier)
	var i GithubOauthFlow
	err := row.Scan(
		&i.Identifier,
		&i.Verifier,
		&i.Challenge,
		&i.DeviceIdentifier,
		&i.UserIdentifier,
		&i.NextUrl,
		&i.CreatedAt,
	)
	return i, err
}

const getGoogleOAuthFlowByIdentifier = `-- name: GetGoogleOAuthFlowByIdentifier :one
SELECT identifier, verifier, challenge, device_identifier, user_identifier, next_url, created_at
FROM google_oauth_flows
WHERE identifier = ? LIMIT 1
`

func (q *Queries) GetGoogleOAuthFlowByIdentifier(ctx context.Context, identifier string) (GoogleOauthFlow, error) {
	row := q.db.QueryRowContext(ctx, getGoogleOAuthFlowByIdentifier, identifier)
	var i GoogleOauthFlow
	err := row.Scan(
		&i.Identifier,
		&i.Verifier,
		&i.Challenge,
		&i.DeviceIdentifier,
		&i.UserIdentifier,
		&i.NextUrl,
		&i.CreatedAt,
	)
	return i, err
}

const getMagicLinkFlowByIdentifier = `-- name: GetMagicLinkFlowByIdentifier :one
SELECT identifier, salt, hash, email_address, device_identifier, user_identifier, next_url, created_at
FROM magic_link_flows
WHERE identifier = ? LIMIT 1
`

func (q *Queries) GetMagicLinkFlowByIdentifier(ctx context.Context, identifier string) (MagicLinkFlow, error) {
	row := q.db.QueryRowContext(ctx, getMagicLinkFlowByIdentifier, identifier)
	var i MagicLinkFlow
	err := row.Scan(
		&i.Identifier,
		&i.Salt,
		&i.Hash,
		&i.EmailAddress,
		&i.DeviceIdentifier,
		&i.UserIdentifier,
		&i.NextUrl,
		&i.CreatedAt,
	)
	return i, err
}

const updateDeviceCodeFlowLastPollByPoll = `-- name: UpdateDeviceCodeFlowLastPollByPoll :exec
UPDATE device_code_flows
SET last_poll = CURRENT_TIMESTAMP
WHERE poll = ?
`

func (q *Queries) UpdateDeviceCodeFlowLastPollByPoll(ctx context.Context, poll string) error {
	_, err := q.db.ExecContext(ctx, updateDeviceCodeFlowLastPollByPoll, poll)
	return err
}
