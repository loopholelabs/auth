// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.30.0
// source: memberships.sql

package generated

import (
	"context"

	"github.com/jackc/pgx/v5/pgtype"
)

const createMembership = `-- name: CreateMembership :exec
INSERT INTO memberships (user_identifier, organization_identifier, role, created_at)
VALUES ($1, $2, LOWER($3), CURRENT_TIMESTAMP)
`

type CreateMembershipParams struct {
	UserIdentifier         pgtype.UUID
	OrganizationIdentifier pgtype.UUID
	Role                   string
}

func (q *Queries) CreateMembership(ctx context.Context, arg CreateMembershipParams) error {
	_, err := q.db.Exec(ctx, createMembership, arg.UserIdentifier, arg.OrganizationIdentifier, arg.Role)
	return err
}

const getMembershipByUserIdentifierAndOrganizationIdentifier = `-- name: GetMembershipByUserIdentifierAndOrganizationIdentifier :one
SELECT user_identifier, organization_identifier, role, created_at
FROM memberships
WHERE user_identifier = $1
  AND organization_identifier = $2 LIMIT 1
`

type GetMembershipByUserIdentifierAndOrganizationIdentifierParams struct {
	UserIdentifier         pgtype.UUID
	OrganizationIdentifier pgtype.UUID
}

func (q *Queries) GetMembershipByUserIdentifierAndOrganizationIdentifier(ctx context.Context, arg GetMembershipByUserIdentifierAndOrganizationIdentifierParams) (Membership, error) {
	row := q.db.QueryRow(ctx, getMembershipByUserIdentifierAndOrganizationIdentifier, arg.UserIdentifier, arg.OrganizationIdentifier)
	var i Membership
	err := row.Scan(
		&i.UserIdentifier,
		&i.OrganizationIdentifier,
		&i.Role,
		&i.CreatedAt,
	)
	return i, err
}

const getMembershipsByOrganizationIdentifier = `-- name: GetMembershipsByOrganizationIdentifier :many
SELECT user_identifier, organization_identifier, role, created_at
from memberships
WHERE organization_identifier = $1
`

func (q *Queries) GetMembershipsByOrganizationIdentifier(ctx context.Context, organizationIdentifier pgtype.UUID) ([]Membership, error) {
	rows, err := q.db.Query(ctx, getMembershipsByOrganizationIdentifier, organizationIdentifier)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Membership
	for rows.Next() {
		var i Membership
		if err := rows.Scan(
			&i.UserIdentifier,
			&i.OrganizationIdentifier,
			&i.Role,
			&i.CreatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getMembershipsByUserIdentifier = `-- name: GetMembershipsByUserIdentifier :many
SELECT user_identifier, organization_identifier, role, created_at
from memberships
WHERE user_identifier = $1
`

func (q *Queries) GetMembershipsByUserIdentifier(ctx context.Context, userIdentifier pgtype.UUID) ([]Membership, error) {
	rows, err := q.db.Query(ctx, getMembershipsByUserIdentifier, userIdentifier)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Membership
	for rows.Next() {
		var i Membership
		if err := rows.Scan(
			&i.UserIdentifier,
			&i.OrganizationIdentifier,
			&i.Role,
			&i.CreatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updateMembershipRoleByUserIdentifierAndOrganizationIdentifier = `-- name: UpdateMembershipRoleByUserIdentifierAndOrganizationIdentifier :execrows
UPDATE memberships
SET role = LOWER($1)
WHERE user_identifier = $2
  AND organization_identifier = $3
`

type UpdateMembershipRoleByUserIdentifierAndOrganizationIdentifierParams struct {
	Role                   string
	UserIdentifier         pgtype.UUID
	OrganizationIdentifier pgtype.UUID
}

func (q *Queries) UpdateMembershipRoleByUserIdentifierAndOrganizationIdentifier(ctx context.Context, arg UpdateMembershipRoleByUserIdentifierAndOrganizationIdentifierParams) (int64, error) {
	result, err := q.db.Exec(ctx, updateMembershipRoleByUserIdentifierAndOrganizationIdentifier, arg.Role, arg.UserIdentifier, arg.OrganizationIdentifier)
	if err != nil {
		return 0, err
	}
	return result.RowsAffected(), nil
}
