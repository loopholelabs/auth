// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.30.0
// source: sessions.sql

package generated

import (
	"context"

	"github.com/jackc/pgx/v5/pgtype"
)

const createSession = `-- name: CreateSession :exec
INSERT INTO sessions (identifier, organization_identifier, user_identifier, generation, expires_at, created_at)
VALUES ($1, $2, $3, $4,
        $5, CURRENT_TIMESTAMP)
`

type CreateSessionParams struct {
	Identifier             pgtype.UUID
	OrganizationIdentifier pgtype.UUID
	UserIdentifier         pgtype.UUID
	Generation             int32
	ExpiresAt              pgtype.Timestamp
}

func (q *Queries) CreateSession(ctx context.Context, arg CreateSessionParams) error {
	_, err := q.db.Exec(ctx, createSession,
		arg.Identifier,
		arg.OrganizationIdentifier,
		arg.UserIdentifier,
		arg.Generation,
		arg.ExpiresAt,
	)
	return err
}

const deleteExpiredSessions = `-- name: DeleteExpiredSessions :execrows
DELETE
FROM sessions
WHERE expires_at <= NOW()
`

func (q *Queries) DeleteExpiredSessions(ctx context.Context) (int64, error) {
	result, err := q.db.Exec(ctx, deleteExpiredSessions)
	if err != nil {
		return 0, err
	}
	return result.RowsAffected(), nil
}

const deleteSessionByIdentifier = `-- name: DeleteSessionByIdentifier :execrows
DELETE
FROM sessions
WHERE identifier = $1
`

func (q *Queries) DeleteSessionByIdentifier(ctx context.Context, identifier pgtype.UUID) (int64, error) {
	result, err := q.db.Exec(ctx, deleteSessionByIdentifier, identifier)
	if err != nil {
		return 0, err
	}
	return result.RowsAffected(), nil
}

const getSessionByIdentifier = `-- name: GetSessionByIdentifier :one
SELECT identifier, organization_identifier, user_identifier, generation, expires_at, created_at
FROM sessions
WHERE identifier = $1 LIMIT 1
`

func (q *Queries) GetSessionByIdentifier(ctx context.Context, identifier pgtype.UUID) (Session, error) {
	row := q.db.QueryRow(ctx, getSessionByIdentifier, identifier)
	var i Session
	err := row.Scan(
		&i.Identifier,
		&i.OrganizationIdentifier,
		&i.UserIdentifier,
		&i.Generation,
		&i.ExpiresAt,
		&i.CreatedAt,
	)
	return i, err
}

const getSessionByIdentifierAndUserIdentifier = `-- name: GetSessionByIdentifierAndUserIdentifier :one
SELECT identifier, organization_identifier, user_identifier, generation, expires_at, created_at
FROM sessions
WHERE identifier = $1
  AND user_identifier = $2 LIMIT 1
`

type GetSessionByIdentifierAndUserIdentifierParams struct {
	Identifier     pgtype.UUID
	UserIdentifier pgtype.UUID
}

func (q *Queries) GetSessionByIdentifierAndUserIdentifier(ctx context.Context, arg GetSessionByIdentifierAndUserIdentifierParams) (Session, error) {
	row := q.db.QueryRow(ctx, getSessionByIdentifierAndUserIdentifier, arg.Identifier, arg.UserIdentifier)
	var i Session
	err := row.Scan(
		&i.Identifier,
		&i.OrganizationIdentifier,
		&i.UserIdentifier,
		&i.Generation,
		&i.ExpiresAt,
		&i.CreatedAt,
	)
	return i, err
}

const incrementAllSessionGenerationByUserIdentifier = `-- name: IncrementAllSessionGenerationByUserIdentifier :execrows
UPDATE sessions
SET generation = generation + 1
WHERE user_identifier = $1
`

func (q *Queries) IncrementAllSessionGenerationByUserIdentifier(ctx context.Context, userIdentifier pgtype.UUID) (int64, error) {
	result, err := q.db.Exec(ctx, incrementAllSessionGenerationByUserIdentifier, userIdentifier)
	if err != nil {
		return 0, err
	}
	return result.RowsAffected(), nil
}

const updateSessionExpiryByIdentifier = `-- name: UpdateSessionExpiryByIdentifier :execrows
UPDATE sessions
SET expires_at = $1
WHERE identifier = $2
`

type UpdateSessionExpiryByIdentifierParams struct {
	ExpiresAt  pgtype.Timestamp
	Identifier pgtype.UUID
}

func (q *Queries) UpdateSessionExpiryByIdentifier(ctx context.Context, arg UpdateSessionExpiryByIdentifierParams) (int64, error) {
	result, err := q.db.Exec(ctx, updateSessionExpiryByIdentifier, arg.ExpiresAt, arg.Identifier)
	if err != nil {
		return 0, err
	}
	return result.RowsAffected(), nil
}

const updateSessionGenerationByIdentifier = `-- name: UpdateSessionGenerationByIdentifier :execrows
UPDATE sessions
SET generation = $1
WHERE identifier = $2
`

type UpdateSessionGenerationByIdentifierParams struct {
	Generation int32
	Identifier pgtype.UUID
}

func (q *Queries) UpdateSessionGenerationByIdentifier(ctx context.Context, arg UpdateSessionGenerationByIdentifierParams) (int64, error) {
	result, err := q.db.Exec(ctx, updateSessionGenerationByIdentifier, arg.Generation, arg.Identifier)
	if err != nil {
		return 0, err
	}
	return result.RowsAffected(), nil
}
