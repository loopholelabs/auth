// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.29.0
// source: sessions.sql

package generated

import (
	"context"
	"time"
)

const createSession = `-- name: CreateSession :exec
INSERT INTO sessions (identifier, organization_identifier, user_identifier, last_generation, expires_at, created_at)
VALUES (?, ?, ?, ?,
        ?, CURRENT_TIMESTAMP)
`

type CreateSessionParams struct {
	Identifier             string
	OrganizationIdentifier string
	UserIdentifier         string
	LastGeneration         int32
	ExpiresAt              time.Time
}

func (q *Queries) CreateSession(ctx context.Context, arg CreateSessionParams) error {
	_, err := q.db.ExecContext(ctx, createSession,
		arg.Identifier,
		arg.OrganizationIdentifier,
		arg.UserIdentifier,
		arg.LastGeneration,
		arg.ExpiresAt,
	)
	return err
}

const getSessionByIdentifier = `-- name: GetSessionByIdentifier :one
SELECT identifier, organization_identifier, user_identifier, last_generation, expires_at, created_at
FROM sessions
WHERE identifier = ? LIMIT 1
`

func (q *Queries) GetSessionByIdentifier(ctx context.Context, identifier string) (Session, error) {
	row := q.db.QueryRowContext(ctx, getSessionByIdentifier, identifier)
	var i Session
	err := row.Scan(
		&i.Identifier,
		&i.OrganizationIdentifier,
		&i.UserIdentifier,
		&i.LastGeneration,
		&i.ExpiresAt,
		&i.CreatedAt,
	)
	return i, err
}
