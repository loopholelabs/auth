// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.29.0
// source: identities.sql

package generated

import (
	"context"
	"encoding/json"
)

const createIdentity = `-- name: CreateIdentity :exec
INSERT INTO identities (provider, provider_identifier, user_identifier, verified_emails, created_at)
VALUES (?, ?, ?, ?,
        CURRENT_TIMESTAMP)
`

type CreateIdentityParams struct {
	Provider           IdentitiesProvider
	ProviderIdentifier string
	UserIdentifier     string
	VerifiedEmails     json.RawMessage
}

func (q *Queries) CreateIdentity(ctx context.Context, arg CreateIdentityParams) error {
	_, err := q.db.ExecContext(ctx, createIdentity,
		arg.Provider,
		arg.ProviderIdentifier,
		arg.UserIdentifier,
		arg.VerifiedEmails,
	)
	return err
}

const getIdentityByProviderAndProviderIdentifier = `-- name: GetIdentityByProviderAndProviderIdentifier :one
SELECT provider, provider_identifier, user_identifier, verified_emails, created_at
FROM identities
WHERE provider = ?
  AND provider_identifier = ? LIMIT 1
`

type GetIdentityByProviderAndProviderIdentifierParams struct {
	Provider           IdentitiesProvider
	ProviderIdentifier string
}

func (q *Queries) GetIdentityByProviderAndProviderIdentifier(ctx context.Context, arg GetIdentityByProviderAndProviderIdentifierParams) (Identity, error) {
	row := q.db.QueryRowContext(ctx, getIdentityByProviderAndProviderIdentifier, arg.Provider, arg.ProviderIdentifier)
	var i Identity
	err := row.Scan(
		&i.Provider,
		&i.ProviderIdentifier,
		&i.UserIdentifier,
		&i.VerifiedEmails,
		&i.CreatedAt,
	)
	return i, err
}
