// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.30.0
// source: identities.sql

package generated

import (
	"context"

	"github.com/jackc/pgx/v5/pgtype"
)

const createIdentity = `-- name: CreateIdentity :exec
INSERT INTO identities (provider, provider_identifier, user_identifier, verified_emails, created_at)
VALUES ($1, $2, $3, $4,
        CURRENT_TIMESTAMP)
`

type CreateIdentityParams struct {
	Provider           string
	ProviderIdentifier string
	UserIdentifier     pgtype.UUID
	VerifiedEmails     []byte
}

func (q *Queries) CreateIdentity(ctx context.Context, arg CreateIdentityParams) error {
	_, err := q.db.Exec(ctx, createIdentity,
		arg.Provider,
		arg.ProviderIdentifier,
		arg.UserIdentifier,
		arg.VerifiedEmails,
	)
	return err
}

const getAllIdentitiesByUserIdentifier = `-- name: GetAllIdentitiesByUserIdentifier :many
SELECT provider, provider_identifier, user_identifier, verified_emails, created_at
FROM identities
WHERE user_identifier = $1
`

func (q *Queries) GetAllIdentitiesByUserIdentifier(ctx context.Context, userIdentifier pgtype.UUID) ([]Identity, error) {
	rows, err := q.db.Query(ctx, getAllIdentitiesByUserIdentifier, userIdentifier)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Identity
	for rows.Next() {
		var i Identity
		if err := rows.Scan(
			&i.Provider,
			&i.ProviderIdentifier,
			&i.UserIdentifier,
			&i.VerifiedEmails,
			&i.CreatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getIdentityByProviderAndProviderIdentifier = `-- name: GetIdentityByProviderAndProviderIdentifier :one
SELECT provider, provider_identifier, user_identifier, verified_emails, created_at
FROM identities
WHERE provider = $1
  AND provider_identifier = $2 LIMIT 1
`

type GetIdentityByProviderAndProviderIdentifierParams struct {
	Provider           string
	ProviderIdentifier string
}

func (q *Queries) GetIdentityByProviderAndProviderIdentifier(ctx context.Context, arg GetIdentityByProviderAndProviderIdentifierParams) (Identity, error) {
	row := q.db.QueryRow(ctx, getIdentityByProviderAndProviderIdentifier, arg.Provider, arg.ProviderIdentifier)
	var i Identity
	err := row.Scan(
		&i.Provider,
		&i.ProviderIdentifier,
		&i.UserIdentifier,
		&i.VerifiedEmails,
		&i.CreatedAt,
	)
	return i, err
}
