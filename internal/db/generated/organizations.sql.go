// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.29.0
// source: organizations.sql

package generated

import (
	"context"
	"time"
)

const createOrganization = `-- name: CreateOrganization :exec
INSERT INTO organizations (identifier, name, is_default, created_at)
VALUES (?, ?, ?, CURRENT_TIMESTAMP)
`

type CreateOrganizationParams struct {
	Identifier string
	Name       string
	IsDefault  bool
}

func (q *Queries) CreateOrganization(ctx context.Context, arg CreateOrganizationParams) error {
	_, err := q.db.ExecContext(ctx, createOrganization, arg.Identifier, arg.Name, arg.IsDefault)
	return err
}

const getOrganizationByIdentifier = `-- name: GetOrganizationByIdentifier :one
SELECT identifier, name, is_default, created_at
FROM organizations
WHERE identifier = ? LIMIT 1
`

func (q *Queries) GetOrganizationByIdentifier(ctx context.Context, identifier string) (Organization, error) {
	row := q.db.QueryRowContext(ctx, getOrganizationByIdentifier, identifier)
	var i Organization
	err := row.Scan(
		&i.Identifier,
		&i.Name,
		&i.IsDefault,
		&i.CreatedAt,
	)
	return i, err
}

const getOrganizationsForUserIdentifier = `-- name: GetOrganizationsForUserIdentifier :many
SELECT o.identifier, o.name, o.is_default, o.created_at,
       m.role       as membership_role,
       m.created_at AS membership_created_at
FROM memberships m
         INNER JOIN organizations o ON m.organization_identifier = o.identifier
WHERE m.user_identifier = ?
ORDER BY o.created_at DESC
`

type GetOrganizationsForUserIdentifierRow struct {
	Identifier          string
	Name                string
	IsDefault           bool
	CreatedAt           time.Time
	MembershipRole      string
	MembershipCreatedAt time.Time
}

func (q *Queries) GetOrganizationsForUserIdentifier(ctx context.Context, userIdentifier string) ([]GetOrganizationsForUserIdentifierRow, error) {
	rows, err := q.db.QueryContext(ctx, getOrganizationsForUserIdentifier, userIdentifier)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []GetOrganizationsForUserIdentifierRow
	for rows.Next() {
		var i GetOrganizationsForUserIdentifierRow
		if err := rows.Scan(
			&i.Identifier,
			&i.Name,
			&i.IsDefault,
			&i.CreatedAt,
			&i.MembershipRole,
			&i.MembershipCreatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}
