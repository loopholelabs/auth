// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.29.0
// source: session_invalidations.sql

package generated

import (
	"context"
	"time"
)

const createSessionInvalidation = `-- name: CreateSessionInvalidation :exec
INSERT INTO session_invalidations (session_identifier, generation, expires_at, created_at)
VALUES (?, ?, ?, CURRENT_TIMESTAMP)
`

type CreateSessionInvalidationParams struct {
	SessionIdentifier string
	Generation        uint32
	ExpiresAt         time.Time
}

func (q *Queries) CreateSessionInvalidation(ctx context.Context, arg CreateSessionInvalidationParams) error {
	_, err := q.db.ExecContext(ctx, createSessionInvalidation, arg.SessionIdentifier, arg.Generation, arg.ExpiresAt)
	return err
}

const createSessionInvalidationsFromSessionByUserIdentifier = `-- name: CreateSessionInvalidationsFromSessionByUserIdentifier :execrows
INSERT INTO session_invalidations (session_identifier, generation, expires_at)
SELECT identifier, generation, expires_at
FROM sessions
WHERE user_identifier = ?
`

func (q *Queries) CreateSessionInvalidationsFromSessionByUserIdentifier(ctx context.Context, userIdentifier string) (int64, error) {
	result, err := q.db.ExecContext(ctx, createSessionInvalidationsFromSessionByUserIdentifier, userIdentifier)
	if err != nil {
		return 0, err
	}
	return result.RowsAffected()
}

const deleteExpiredSessionInvalidations = `-- name: DeleteExpiredSessionInvalidations :execrows
DELETE
FROM session_invalidations
WHERE expires_at <= NOW()
`

func (q *Queries) DeleteExpiredSessionInvalidations(ctx context.Context) (int64, error) {
	result, err := q.db.ExecContext(ctx, deleteExpiredSessionInvalidations)
	if err != nil {
		return 0, err
	}
	return result.RowsAffected()
}

const getAllSessionInvalidations = `-- name: GetAllSessionInvalidations :many
SELECT session_identifier, generation, expires_at, created_at
FROM session_invalidations
`

func (q *Queries) GetAllSessionInvalidations(ctx context.Context) ([]SessionInvalidation, error) {
	rows, err := q.db.QueryContext(ctx, getAllSessionInvalidations)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []SessionInvalidation
	for rows.Next() {
		var i SessionInvalidation
		if err := rows.Scan(
			&i.SessionIdentifier,
			&i.Generation,
			&i.ExpiresAt,
			&i.CreatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}
