// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.29.0
// source: session_revalidations.sql

package generated

import (
	"context"
	"time"
)

const createSessionRevalidation = `-- name: CreateSessionRevalidation :exec
INSERT INTO session_revalidations (session_identifier, generation, expires_at, created_at)
VALUES (?, ?, ?, CURRENT_TIMESTAMP)
`

type CreateSessionRevalidationParams struct {
	SessionIdentifier string
	Generation        uint32
	ExpiresAt         time.Time
}

func (q *Queries) CreateSessionRevalidation(ctx context.Context, arg CreateSessionRevalidationParams) error {
	_, err := q.db.ExecContext(ctx, createSessionRevalidation, arg.SessionIdentifier, arg.Generation, arg.ExpiresAt)
	return err
}

const deleteExpiredSessionRevalidations = `-- name: DeleteExpiredSessionRevalidations :execrows
DELETE
FROM session_revalidations
WHERE expires_at <= NOW()
`

func (q *Queries) DeleteExpiredSessionRevalidations(ctx context.Context) (int64, error) {
	result, err := q.db.ExecContext(ctx, deleteExpiredSessionRevalidations)
	if err != nil {
		return 0, err
	}
	return result.RowsAffected()
}

const getAllSessionRevalidations = `-- name: GetAllSessionRevalidations :many
SELECT session_identifier, generation, expires_at, created_at
FROM session_revalidations
`

func (q *Queries) GetAllSessionRevalidations(ctx context.Context) ([]SessionRevalidation, error) {
	rows, err := q.db.QueryContext(ctx, getAllSessionRevalidations)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []SessionRevalidation
	for rows.Next() {
		var i SessionRevalidation
		if err := rows.Scan(
			&i.SessionIdentifier,
			&i.Generation,
			&i.ExpiresAt,
			&i.CreatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}
