// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.30.0
// source: session_revocations.sql

package generated

import (
	"context"

	"github.com/jackc/pgx/v5/pgtype"
)

const createSessionRevocation = `-- name: CreateSessionRevocation :exec
INSERT INTO session_revocations (session_identifier, expires_at, created_at)
VALUES ($1, $2, CURRENT_TIMESTAMP)
`

type CreateSessionRevocationParams struct {
	SessionIdentifier pgtype.UUID
	ExpiresAt         pgtype.Timestamp
}

func (q *Queries) CreateSessionRevocation(ctx context.Context, arg CreateSessionRevocationParams) error {
	_, err := q.db.Exec(ctx, createSessionRevocation, arg.SessionIdentifier, arg.ExpiresAt)
	return err
}

const deleteExpiredSessionRevocations = `-- name: DeleteExpiredSessionRevocations :execrows
DELETE
FROM session_revocations
WHERE expires_at <= NOW()
`

func (q *Queries) DeleteExpiredSessionRevocations(ctx context.Context) (int64, error) {
	result, err := q.db.Exec(ctx, deleteExpiredSessionRevocations)
	if err != nil {
		return 0, err
	}
	return result.RowsAffected(), nil
}

const getAllSessionRevocations = `-- name: GetAllSessionRevocations :many
SELECT session_identifier, expires_at, created_at
FROM session_revocations
`

func (q *Queries) GetAllSessionRevocations(ctx context.Context) ([]SessionRevocation, error) {
	rows, err := q.db.Query(ctx, getAllSessionRevocations)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []SessionRevocation
	for rows.Next() {
		var i SessionRevocation
		if err := rows.Scan(&i.SessionIdentifier, &i.ExpiresAt, &i.CreatedAt); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getSessionRevocationBySessionIdentifier = `-- name: GetSessionRevocationBySessionIdentifier :one
SELECT session_identifier, expires_at, created_at
FROM session_revocations
WHERE session_identifier = $1 LIMIT 1
`

func (q *Queries) GetSessionRevocationBySessionIdentifier(ctx context.Context, sessionIdentifier pgtype.UUID) (SessionRevocation, error) {
	row := q.db.QueryRow(ctx, getSessionRevocationBySessionIdentifier, sessionIdentifier)
	var i SessionRevocation
	err := row.Scan(&i.SessionIdentifier, &i.ExpiresAt, &i.CreatedAt)
	return i, err
}
