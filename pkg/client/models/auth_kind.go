/*
	Copyright 2023 Loophole Labs

	Licensed under the Apache License, Version 2.0 (the "License");
	you may not use this file except in compliance with the License.
	You may obtain a copy of the License at

		   http://www.apache.org/licenses/LICENSE-2.0

	Unless required by applicable law or agreed to in writing, software
	distributed under the License is distributed on an "AS IS" BASIS,
	WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
	See the License for the specific language governing permissions and
	limitations under the License.
*/

// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"encoding/json"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/validate"
)

// AuthKind auth kind
//
// swagger:model auth.Kind
type AuthKind string

func NewAuthKind(value AuthKind) *AuthKind {
	return &value
}

// Pointer returns a pointer to a freshly-allocated AuthKind.
func (m AuthKind) Pointer() *AuthKind {
	return &m
}

const (

	// AuthKindSession captures enum value "session"
	AuthKindSession AuthKind = "session"

	// AuthKindAPI captures enum value "api"
	AuthKindAPI AuthKind = "api"

	// AuthKindService captures enum value "service"
	AuthKindService AuthKind = "service"
)

// for schema
var authKindEnum []interface{}

func init() {
	var res []AuthKind
	if err := json.Unmarshal([]byte(`["session","api","service"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		authKindEnum = append(authKindEnum, v)
	}
}

func (m AuthKind) validateAuthKindEnum(path, location string, value AuthKind) error {
	if err := validate.EnumCase(path, location, value, authKindEnum, true); err != nil {
		return err
	}
	return nil
}

// Validate validates this auth kind
func (m AuthKind) Validate(formats strfmt.Registry) error {
	var res []error

	// value enum
	if err := m.validateAuthKindEnum("", "body", m); err != nil {
		return err
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

// ContextValidate validates this auth kind based on context it is used
func (m AuthKind) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}
