/*
 	Copyright 2023 Loophole Labs

 	Licensed under the Apache License, Version 2.0 (the "License");
 	you may not use this file except in compliance with the License.
 	You may obtain a copy of the License at

 		   http://www.apache.org/licenses/LICENSE-2.0

 	Unless required by applicable law or agreed to in writing, software
 	distributed under the License is distributed on an "AS IS" BASIS,
 	WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 	See the License for the specific language governing permissions and
 	limitations under the License.
*/

// Code generated by go-swagger; DO NOT EDIT.

package device

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"
)

// New creates a new device API client.
func New(transport runtime.ClientTransport, formats strfmt.Registry) ClientService {
	return &Client{transport: transport, formats: formats}
}

/*
Client for device API
*/
type Client struct {
	transport runtime.ClientTransport
	formats   strfmt.Registry
}

// ClientOption is the option for Client methods
type ClientOption func(*runtime.ClientOperation)

// ClientService is the interface for Client methods
type ClientService interface {
	PostDeviceCallback(params *PostDeviceCallbackParams, opts ...ClientOption) (*PostDeviceCallbackOK, error)

	PostDeviceFlow(params *PostDeviceFlowParams, opts ...ClientOption) (*PostDeviceFlowOK, error)

	PostDevicePoll(params *PostDevicePollParams, opts ...ClientOption) (*PostDevicePollOK, error)

	PostMagicFlow(params *PostMagicFlowParams, opts ...ClientOption) (*PostMagicFlowOK, error)

	SetTransport(transport runtime.ClientTransport)
}

/*
PostDeviceCallback devices callback validates the device code and returns the flow identifier

DeviceCallback validates the device code and returns the flow identifier
*/
func (a *Client) PostDeviceCallback(params *PostDeviceCallbackParams, opts ...ClientOption) (*PostDeviceCallbackOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPostDeviceCallbackParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "PostDeviceCallback",
		Method:             "POST",
		PathPattern:        "/device/callback",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &PostDeviceCallbackReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*PostDeviceCallbackOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for PostDeviceCallback: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
PostDeviceFlow devices flow starts the device code flow

DeviceFlow starts the device code flow
*/
func (a *Client) PostDeviceFlow(params *PostDeviceFlowParams, opts ...ClientOption) (*PostDeviceFlowOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPostDeviceFlowParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "PostDeviceFlow",
		Method:             "POST",
		PathPattern:        "/device/flow",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &PostDeviceFlowReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*PostDeviceFlowOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for PostDeviceFlow: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
PostDevicePoll devices poll polls the device code flow using the user code

DevicePoll polls the device code flow using the user code
*/
func (a *Client) PostDevicePoll(params *PostDevicePollParams, opts ...ClientOption) (*PostDevicePollOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPostDevicePollParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "PostDevicePoll",
		Method:             "POST",
		PathPattern:        "/device/poll",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &PostDevicePollReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*PostDevicePollOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for PostDevicePoll: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
PostMagicFlow magics flow starts the magic link flow

MagicFlow starts the magic link flow
*/
func (a *Client) PostMagicFlow(params *PostMagicFlowParams, opts ...ClientOption) (*PostMagicFlowOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPostMagicFlowParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "PostMagicFlow",
		Method:             "POST",
		PathPattern:        "/magic/flow",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &PostMagicFlowReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*PostMagicFlowOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for PostMagicFlow: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

// SetTransport changes the transport on the client
func (a *Client) SetTransport(transport runtime.ClientTransport) {
	a.transport = transport
}
