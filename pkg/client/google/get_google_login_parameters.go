/*
	Copyright 2023 Loophole Labs

	Licensed under the Apache License, Version 2.0 (the "License");
	you may not use this file except in compliance with the License.
	You may obtain a copy of the License at

		   http://www.apache.org/licenses/LICENSE-2.0

	Unless required by applicable law or agreed to in writing, software
	distributed under the License is distributed on an "AS IS" BASIS,
	WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
	See the License for the specific language governing permissions and
	limitations under the License.
*/

// Code generated by go-swagger; DO NOT EDIT.

package google

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"net/http"
	"time"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	cr "github.com/go-openapi/runtime/client"
	"github.com/go-openapi/strfmt"
)

// NewGetGoogleLoginParams creates a new GetGoogleLoginParams object,
// with the default timeout for this client.
//
// Default values are not hydrated, since defaults are normally applied by the API server side.
//
// To enforce default values in parameter, use SetDefaults or WithDefaults.
func NewGetGoogleLoginParams() *GetGoogleLoginParams {
	return &GetGoogleLoginParams{
		timeout: cr.DefaultTimeout,
	}
}

// NewGetGoogleLoginParamsWithTimeout creates a new GetGoogleLoginParams object
// with the ability to set a timeout on a request.
func NewGetGoogleLoginParamsWithTimeout(timeout time.Duration) *GetGoogleLoginParams {
	return &GetGoogleLoginParams{
		timeout: timeout,
	}
}

// NewGetGoogleLoginParamsWithContext creates a new GetGoogleLoginParams object
// with the ability to set a context for a request.
func NewGetGoogleLoginParamsWithContext(ctx context.Context) *GetGoogleLoginParams {
	return &GetGoogleLoginParams{
		Context: ctx,
	}
}

// NewGetGoogleLoginParamsWithHTTPClient creates a new GetGoogleLoginParams object
// with the ability to set a custom HTTPClient for a request.
func NewGetGoogleLoginParamsWithHTTPClient(client *http.Client) *GetGoogleLoginParams {
	return &GetGoogleLoginParams{
		HTTPClient: client,
	}
}

/*
GetGoogleLoginParams contains all the parameters to send to the API endpoint

	for the get google login operation.

	Typically these are written to a http.Request.
*/
type GetGoogleLoginParams struct {

	/* Identifier.

	   Device Flow Identifier
	*/
	Identifier *string

	/* Next.

	   Next Redirect URL
	*/
	Next *string

	/* Organization.

	   Organization
	*/
	Organization *string

	timeout    time.Duration
	Context    context.Context
	HTTPClient *http.Client
}

// WithDefaults hydrates default values in the get google login params (not the query body).
//
// All values with no default are reset to their zero value.
func (o *GetGoogleLoginParams) WithDefaults() *GetGoogleLoginParams {
	o.SetDefaults()
	return o
}

// SetDefaults hydrates default values in the get google login params (not the query body).
//
// All values with no default are reset to their zero value.
func (o *GetGoogleLoginParams) SetDefaults() {
	// no default values defined for this parameter
}

// WithTimeout adds the timeout to the get google login params
func (o *GetGoogleLoginParams) WithTimeout(timeout time.Duration) *GetGoogleLoginParams {
	o.SetTimeout(timeout)
	return o
}

// SetTimeout adds the timeout to the get google login params
func (o *GetGoogleLoginParams) SetTimeout(timeout time.Duration) {
	o.timeout = timeout
}

// WithContext adds the context to the get google login params
func (o *GetGoogleLoginParams) WithContext(ctx context.Context) *GetGoogleLoginParams {
	o.SetContext(ctx)
	return o
}

// SetContext adds the context to the get google login params
func (o *GetGoogleLoginParams) SetContext(ctx context.Context) {
	o.Context = ctx
}

// WithHTTPClient adds the HTTPClient to the get google login params
func (o *GetGoogleLoginParams) WithHTTPClient(client *http.Client) *GetGoogleLoginParams {
	o.SetHTTPClient(client)
	return o
}

// SetHTTPClient adds the HTTPClient to the get google login params
func (o *GetGoogleLoginParams) SetHTTPClient(client *http.Client) {
	o.HTTPClient = client
}

// WithIdentifier adds the identifier to the get google login params
func (o *GetGoogleLoginParams) WithIdentifier(identifier *string) *GetGoogleLoginParams {
	o.SetIdentifier(identifier)
	return o
}

// SetIdentifier adds the identifier to the get google login params
func (o *GetGoogleLoginParams) SetIdentifier(identifier *string) {
	o.Identifier = identifier
}

// WithNext adds the next to the get google login params
func (o *GetGoogleLoginParams) WithNext(next *string) *GetGoogleLoginParams {
	o.SetNext(next)
	return o
}

// SetNext adds the next to the get google login params
func (o *GetGoogleLoginParams) SetNext(next *string) {
	o.Next = next
}

// WithOrganization adds the organization to the get google login params
func (o *GetGoogleLoginParams) WithOrganization(organization *string) *GetGoogleLoginParams {
	o.SetOrganization(organization)
	return o
}

// SetOrganization adds the organization to the get google login params
func (o *GetGoogleLoginParams) SetOrganization(organization *string) {
	o.Organization = organization
}

// WriteToRequest writes these params to a swagger request
func (o *GetGoogleLoginParams) WriteToRequest(r runtime.ClientRequest, reg strfmt.Registry) error {

	if err := r.SetTimeout(o.timeout); err != nil {
		return err
	}
	var res []error

	if o.Identifier != nil {

		// query param identifier
		var qrIdentifier string

		if o.Identifier != nil {
			qrIdentifier = *o.Identifier
		}
		qIdentifier := qrIdentifier
		if qIdentifier != "" {

			if err := r.SetQueryParam("identifier", qIdentifier); err != nil {
				return err
			}
		}
	}

	if o.Next != nil {

		// query param next
		var qrNext string

		if o.Next != nil {
			qrNext = *o.Next
		}
		qNext := qrNext
		if qNext != "" {

			if err := r.SetQueryParam("next", qNext); err != nil {
				return err
			}
		}
	}

	if o.Organization != nil {

		// query param organization
		var qrOrganization string

		if o.Organization != nil {
			qrOrganization = *o.Organization
		}
		qOrganization := qrOrganization
		if qOrganization != "" {

			if err := r.SetQueryParam("organization", qOrganization); err != nil {
				return err
			}
		}
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}
