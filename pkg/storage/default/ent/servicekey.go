// Code generated by ent, DO NOT EDIT.

package ent

import (
	"fmt"
	"strings"

	"entgo.io/ent/dialect/sql"
	"github.com/loopholelabs/auth/pkg/storage/default/ent/servicekey"
	"github.com/loopholelabs/auth/pkg/storage/default/ent/user"
)

// ServiceKey is the model entity for the ServiceKey schema.
type ServiceKey struct {
	config `json:"-"`
	// ID of the ent.
	ID int `json:"id,omitempty"`
	// CreatedAt holds the value of the "created_at" field.
	CreatedAt int64 `json:"created_at,omitempty"`
	// Name holds the value of the "name" field.
	Name string `json:"name,omitempty"`
	// Value holds the value of the "value" field.
	Value string `json:"value,omitempty"`
	// Secret holds the value of the "secret" field.
	Secret []byte `json:"secret,omitempty"`
	// Resource holds the value of the "resource" field.
	Resource string `json:"resource,omitempty"`
	// NumUsed holds the value of the "num_used" field.
	NumUsed int64 `json:"num_used,omitempty"`
	// MaxUses holds the value of the "max_uses" field.
	MaxUses int64 `json:"max_uses,omitempty"`
	// Expires holds the value of the "expires" field.
	Expires int64 `json:"expires,omitempty"`
	// Edges holds the relations/edges for other nodes in the graph.
	// The values are being populated by the ServiceKeyQuery when eager-loading is set.
	Edges            ServiceKeyEdges `json:"edges"`
	user_servicekeys *int
}

// ServiceKeyEdges holds the relations/edges for other nodes in the graph.
type ServiceKeyEdges struct {
	// Owner holds the value of the owner edge.
	Owner *User `json:"owner,omitempty"`
	// loadedTypes holds the information for reporting if a
	// type was loaded (or requested) in eager-loading or not.
	loadedTypes [1]bool
}

// OwnerOrErr returns the Owner value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e ServiceKeyEdges) OwnerOrErr() (*User, error) {
	if e.loadedTypes[0] {
		if e.Owner == nil {
			// Edge was loaded but was not found.
			return nil, &NotFoundError{label: user.Label}
		}
		return e.Owner, nil
	}
	return nil, &NotLoadedError{edge: "owner"}
}

// scanValues returns the types for scanning values from sql.Rows.
func (*ServiceKey) scanValues(columns []string) ([]any, error) {
	values := make([]any, len(columns))
	for i := range columns {
		switch columns[i] {
		case servicekey.FieldSecret:
			values[i] = new([]byte)
		case servicekey.FieldID, servicekey.FieldCreatedAt, servicekey.FieldNumUsed, servicekey.FieldMaxUses, servicekey.FieldExpires:
			values[i] = new(sql.NullInt64)
		case servicekey.FieldName, servicekey.FieldValue, servicekey.FieldResource:
			values[i] = new(sql.NullString)
		case servicekey.ForeignKeys[0]: // user_servicekeys
			values[i] = new(sql.NullInt64)
		default:
			return nil, fmt.Errorf("unexpected column %q for type ServiceKey", columns[i])
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the ServiceKey fields.
func (sk *ServiceKey) assignValues(columns []string, values []any) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case servicekey.FieldID:
			value, ok := values[i].(*sql.NullInt64)
			if !ok {
				return fmt.Errorf("unexpected type %T for field id", value)
			}
			sk.ID = int(value.Int64)
		case servicekey.FieldCreatedAt:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field created_at", values[i])
			} else if value.Valid {
				sk.CreatedAt = value.Int64
			}
		case servicekey.FieldName:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field name", values[i])
			} else if value.Valid {
				sk.Name = value.String
			}
		case servicekey.FieldValue:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field value", values[i])
			} else if value.Valid {
				sk.Value = value.String
			}
		case servicekey.FieldSecret:
			if value, ok := values[i].(*[]byte); !ok {
				return fmt.Errorf("unexpected type %T for field secret", values[i])
			} else if value != nil {
				sk.Secret = *value
			}
		case servicekey.FieldResource:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field resource", values[i])
			} else if value.Valid {
				sk.Resource = value.String
			}
		case servicekey.FieldNumUsed:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field num_used", values[i])
			} else if value.Valid {
				sk.NumUsed = value.Int64
			}
		case servicekey.FieldMaxUses:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field max_uses", values[i])
			} else if value.Valid {
				sk.MaxUses = value.Int64
			}
		case servicekey.FieldExpires:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field expires", values[i])
			} else if value.Valid {
				sk.Expires = value.Int64
			}
		case servicekey.ForeignKeys[0]:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for edge-field user_servicekeys", value)
			} else if value.Valid {
				sk.user_servicekeys = new(int)
				*sk.user_servicekeys = int(value.Int64)
			}
		}
	}
	return nil
}

// QueryOwner queries the "owner" edge of the ServiceKey entity.
func (sk *ServiceKey) QueryOwner() *UserQuery {
	return (&ServiceKeyClient{config: sk.config}).QueryOwner(sk)
}

// Update returns a builder for updating this ServiceKey.
// Note that you need to call ServiceKey.Unwrap() before calling this method if this ServiceKey
// was returned from a transaction, and the transaction was committed or rolled back.
func (sk *ServiceKey) Update() *ServiceKeyUpdateOne {
	return (&ServiceKeyClient{config: sk.config}).UpdateOne(sk)
}

// Unwrap unwraps the ServiceKey entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (sk *ServiceKey) Unwrap() *ServiceKey {
	_tx, ok := sk.config.driver.(*txDriver)
	if !ok {
		panic("ent: ServiceKey is not a transactional entity")
	}
	sk.config.driver = _tx.drv
	return sk
}

// String implements the fmt.Stringer.
func (sk *ServiceKey) String() string {
	var builder strings.Builder
	builder.WriteString("ServiceKey(")
	builder.WriteString(fmt.Sprintf("id=%v, ", sk.ID))
	builder.WriteString("created_at=")
	builder.WriteString(fmt.Sprintf("%v", sk.CreatedAt))
	builder.WriteString(", ")
	builder.WriteString("name=")
	builder.WriteString(sk.Name)
	builder.WriteString(", ")
	builder.WriteString("value=")
	builder.WriteString(sk.Value)
	builder.WriteString(", ")
	builder.WriteString("secret=")
	builder.WriteString(fmt.Sprintf("%v", sk.Secret))
	builder.WriteString(", ")
	builder.WriteString("resource=")
	builder.WriteString(sk.Resource)
	builder.WriteString(", ")
	builder.WriteString("num_used=")
	builder.WriteString(fmt.Sprintf("%v", sk.NumUsed))
	builder.WriteString(", ")
	builder.WriteString("max_uses=")
	builder.WriteString(fmt.Sprintf("%v", sk.MaxUses))
	builder.WriteString(", ")
	builder.WriteString("expires=")
	builder.WriteString(fmt.Sprintf("%v", sk.Expires))
	builder.WriteByte(')')
	return builder.String()
}

// ServiceKeys is a parsable slice of ServiceKey.
type ServiceKeys []*ServiceKey

func (sk ServiceKeys) config(cfg config) {
	for _i := range sk {
		sk[_i].config = cfg
	}
}
