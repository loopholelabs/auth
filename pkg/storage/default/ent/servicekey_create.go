// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"

	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/loopholelabs/auth/pkg/storage/default/ent/servicekey"
	"github.com/loopholelabs/auth/pkg/storage/default/ent/user"
)

// ServiceKeyCreate is the builder for creating a ServiceKey entity.
type ServiceKeyCreate struct {
	config
	mutation *ServiceKeyMutation
	hooks    []Hook
}

// SetCreatedAt sets the "created_at" field.
func (skc *ServiceKeyCreate) SetCreatedAt(i int64) *ServiceKeyCreate {
	skc.mutation.SetCreatedAt(i)
	return skc
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (skc *ServiceKeyCreate) SetNillableCreatedAt(i *int64) *ServiceKeyCreate {
	if i != nil {
		skc.SetCreatedAt(*i)
	}
	return skc
}

// SetName sets the "name" field.
func (skc *ServiceKeyCreate) SetName(s string) *ServiceKeyCreate {
	skc.mutation.SetName(s)
	return skc
}

// SetValue sets the "value" field.
func (skc *ServiceKeyCreate) SetValue(s string) *ServiceKeyCreate {
	skc.mutation.SetValue(s)
	return skc
}

// SetSecret sets the "secret" field.
func (skc *ServiceKeyCreate) SetSecret(b []byte) *ServiceKeyCreate {
	skc.mutation.SetSecret(b)
	return skc
}

// SetResource sets the "resource" field.
func (skc *ServiceKeyCreate) SetResource(s string) *ServiceKeyCreate {
	skc.mutation.SetResource(s)
	return skc
}

// SetNillableResource sets the "resource" field if the given value is not nil.
func (skc *ServiceKeyCreate) SetNillableResource(s *string) *ServiceKeyCreate {
	if s != nil {
		skc.SetResource(*s)
	}
	return skc
}

// SetNumUsed sets the "num_used" field.
func (skc *ServiceKeyCreate) SetNumUsed(i int64) *ServiceKeyCreate {
	skc.mutation.SetNumUsed(i)
	return skc
}

// SetNillableNumUsed sets the "num_used" field if the given value is not nil.
func (skc *ServiceKeyCreate) SetNillableNumUsed(i *int64) *ServiceKeyCreate {
	if i != nil {
		skc.SetNumUsed(*i)
	}
	return skc
}

// SetMaxUses sets the "max_uses" field.
func (skc *ServiceKeyCreate) SetMaxUses(i int64) *ServiceKeyCreate {
	skc.mutation.SetMaxUses(i)
	return skc
}

// SetNillableMaxUses sets the "max_uses" field if the given value is not nil.
func (skc *ServiceKeyCreate) SetNillableMaxUses(i *int64) *ServiceKeyCreate {
	if i != nil {
		skc.SetMaxUses(*i)
	}
	return skc
}

// SetExpires sets the "expires" field.
func (skc *ServiceKeyCreate) SetExpires(i int64) *ServiceKeyCreate {
	skc.mutation.SetExpires(i)
	return skc
}

// SetNillableExpires sets the "expires" field if the given value is not nil.
func (skc *ServiceKeyCreate) SetNillableExpires(i *int64) *ServiceKeyCreate {
	if i != nil {
		skc.SetExpires(*i)
	}
	return skc
}

// SetOwnerID sets the "owner" edge to the User entity by ID.
func (skc *ServiceKeyCreate) SetOwnerID(id int) *ServiceKeyCreate {
	skc.mutation.SetOwnerID(id)
	return skc
}

// SetNillableOwnerID sets the "owner" edge to the User entity by ID if the given value is not nil.
func (skc *ServiceKeyCreate) SetNillableOwnerID(id *int) *ServiceKeyCreate {
	if id != nil {
		skc = skc.SetOwnerID(*id)
	}
	return skc
}

// SetOwner sets the "owner" edge to the User entity.
func (skc *ServiceKeyCreate) SetOwner(u *User) *ServiceKeyCreate {
	return skc.SetOwnerID(u.ID)
}

// Mutation returns the ServiceKeyMutation object of the builder.
func (skc *ServiceKeyCreate) Mutation() *ServiceKeyMutation {
	return skc.mutation
}

// Save creates the ServiceKey in the database.
func (skc *ServiceKeyCreate) Save(ctx context.Context) (*ServiceKey, error) {
	var (
		err  error
		node *ServiceKey
	)
	skc.defaults()
	if len(skc.hooks) == 0 {
		if err = skc.check(); err != nil {
			return nil, err
		}
		node, err = skc.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*ServiceKeyMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			if err = skc.check(); err != nil {
				return nil, err
			}
			skc.mutation = mutation
			if node, err = skc.sqlSave(ctx); err != nil {
				return nil, err
			}
			mutation.id = &node.ID
			mutation.done = true
			return node, err
		})
		for i := len(skc.hooks) - 1; i >= 0; i-- {
			if skc.hooks[i] == nil {
				return nil, fmt.Errorf("ent: uninitialized hook (forgotten import ent/runtime?)")
			}
			mut = skc.hooks[i](mut)
		}
		v, err := mut.Mutate(ctx, skc.mutation)
		if err != nil {
			return nil, err
		}
		nv, ok := v.(*ServiceKey)
		if !ok {
			return nil, fmt.Errorf("unexpected node type %T returned from ServiceKeyMutation", v)
		}
		node = nv
	}
	return node, err
}

// SaveX calls Save and panics if Save returns an error.
func (skc *ServiceKeyCreate) SaveX(ctx context.Context) *ServiceKey {
	v, err := skc.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (skc *ServiceKeyCreate) Exec(ctx context.Context) error {
	_, err := skc.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (skc *ServiceKeyCreate) ExecX(ctx context.Context) {
	if err := skc.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (skc *ServiceKeyCreate) defaults() {
	if _, ok := skc.mutation.CreatedAt(); !ok {
		v := servicekey.DefaultCreatedAt()
		skc.mutation.SetCreatedAt(v)
	}
	if _, ok := skc.mutation.Resource(); !ok {
		v := servicekey.DefaultResource
		skc.mutation.SetResource(v)
	}
	if _, ok := skc.mutation.NumUsed(); !ok {
		v := servicekey.DefaultNumUsed
		skc.mutation.SetNumUsed(v)
	}
	if _, ok := skc.mutation.MaxUses(); !ok {
		v := servicekey.DefaultMaxUses
		skc.mutation.SetMaxUses(v)
	}
	if _, ok := skc.mutation.Expires(); !ok {
		v := servicekey.DefaultExpires
		skc.mutation.SetExpires(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (skc *ServiceKeyCreate) check() error {
	if _, ok := skc.mutation.CreatedAt(); !ok {
		return &ValidationError{Name: "created_at", err: errors.New(`ent: missing required field "ServiceKey.created_at"`)}
	}
	if _, ok := skc.mutation.Name(); !ok {
		return &ValidationError{Name: "name", err: errors.New(`ent: missing required field "ServiceKey.name"`)}
	}
	if v, ok := skc.mutation.Name(); ok {
		if err := servicekey.NameValidator(v); err != nil {
			return &ValidationError{Name: "name", err: fmt.Errorf(`ent: validator failed for field "ServiceKey.name": %w`, err)}
		}
	}
	if _, ok := skc.mutation.Value(); !ok {
		return &ValidationError{Name: "value", err: errors.New(`ent: missing required field "ServiceKey.value"`)}
	}
	if v, ok := skc.mutation.Value(); ok {
		if err := servicekey.ValueValidator(v); err != nil {
			return &ValidationError{Name: "value", err: fmt.Errorf(`ent: validator failed for field "ServiceKey.value": %w`, err)}
		}
	}
	if _, ok := skc.mutation.Secret(); !ok {
		return &ValidationError{Name: "secret", err: errors.New(`ent: missing required field "ServiceKey.secret"`)}
	}
	if v, ok := skc.mutation.Secret(); ok {
		if err := servicekey.SecretValidator(v); err != nil {
			return &ValidationError{Name: "secret", err: fmt.Errorf(`ent: validator failed for field "ServiceKey.secret": %w`, err)}
		}
	}
	if _, ok := skc.mutation.Resource(); !ok {
		return &ValidationError{Name: "resource", err: errors.New(`ent: missing required field "ServiceKey.resource"`)}
	}
	if _, ok := skc.mutation.NumUsed(); !ok {
		return &ValidationError{Name: "num_used", err: errors.New(`ent: missing required field "ServiceKey.num_used"`)}
	}
	if _, ok := skc.mutation.MaxUses(); !ok {
		return &ValidationError{Name: "max_uses", err: errors.New(`ent: missing required field "ServiceKey.max_uses"`)}
	}
	if _, ok := skc.mutation.Expires(); !ok {
		return &ValidationError{Name: "expires", err: errors.New(`ent: missing required field "ServiceKey.expires"`)}
	}
	return nil
}

func (skc *ServiceKeyCreate) sqlSave(ctx context.Context) (*ServiceKey, error) {
	_node, _spec := skc.createSpec()
	if err := sqlgraph.CreateNode(ctx, skc.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	id := _spec.ID.Value.(int64)
	_node.ID = int(id)
	return _node, nil
}

func (skc *ServiceKeyCreate) createSpec() (*ServiceKey, *sqlgraph.CreateSpec) {
	var (
		_node = &ServiceKey{config: skc.config}
		_spec = &sqlgraph.CreateSpec{
			Table: servicekey.Table,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt,
				Column: servicekey.FieldID,
			},
		}
	)
	if value, ok := skc.mutation.CreatedAt(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Value:  value,
			Column: servicekey.FieldCreatedAt,
		})
		_node.CreatedAt = value
	}
	if value, ok := skc.mutation.Name(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: servicekey.FieldName,
		})
		_node.Name = value
	}
	if value, ok := skc.mutation.Value(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: servicekey.FieldValue,
		})
		_node.Value = value
	}
	if value, ok := skc.mutation.Secret(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeBytes,
			Value:  value,
			Column: servicekey.FieldSecret,
		})
		_node.Secret = value
	}
	if value, ok := skc.mutation.Resource(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: servicekey.FieldResource,
		})
		_node.Resource = value
	}
	if value, ok := skc.mutation.NumUsed(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Value:  value,
			Column: servicekey.FieldNumUsed,
		})
		_node.NumUsed = value
	}
	if value, ok := skc.mutation.MaxUses(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Value:  value,
			Column: servicekey.FieldMaxUses,
		})
		_node.MaxUses = value
	}
	if value, ok := skc.mutation.Expires(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Value:  value,
			Column: servicekey.FieldExpires,
		})
		_node.Expires = value
	}
	if nodes := skc.mutation.OwnerIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   servicekey.OwnerTable,
			Columns: []string{servicekey.OwnerColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: user.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.user_servicekeys = &nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	return _node, _spec
}

// ServiceKeyCreateBulk is the builder for creating many ServiceKey entities in bulk.
type ServiceKeyCreateBulk struct {
	config
	builders []*ServiceKeyCreate
}

// Save creates the ServiceKey entities in the database.
func (skcb *ServiceKeyCreateBulk) Save(ctx context.Context) ([]*ServiceKey, error) {
	specs := make([]*sqlgraph.CreateSpec, len(skcb.builders))
	nodes := make([]*ServiceKey, len(skcb.builders))
	mutators := make([]Mutator, len(skcb.builders))
	for i := range skcb.builders {
		func(i int, root context.Context) {
			builder := skcb.builders[i]
			builder.defaults()
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*ServiceKeyMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				nodes[i], specs[i] = builder.createSpec()
				var err error
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, skcb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, skcb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{msg: err.Error(), wrap: err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				if specs[i].ID.Value != nil {
					id := specs[i].ID.Value.(int64)
					nodes[i].ID = int(id)
				}
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, skcb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (skcb *ServiceKeyCreateBulk) SaveX(ctx context.Context) []*ServiceKey {
	v, err := skcb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (skcb *ServiceKeyCreateBulk) Exec(ctx context.Context) error {
	_, err := skcb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (skcb *ServiceKeyCreateBulk) ExecX(ctx context.Context) {
	if err := skcb.Exec(ctx); err != nil {
		panic(err)
	}
}
