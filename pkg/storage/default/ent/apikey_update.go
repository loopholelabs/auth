// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/loopholelabs/auth/pkg/storage/default/ent/apikey"
	"github.com/loopholelabs/auth/pkg/storage/default/ent/predicate"
	"github.com/loopholelabs/auth/pkg/storage/default/ent/user"
)

// APIKeyUpdate is the builder for updating APIKey entities.
type APIKeyUpdate struct {
	config
	hooks    []Hook
	mutation *APIKeyMutation
}

// Where appends a list predicates to the APIKeyUpdate builder.
func (aku *APIKeyUpdate) Where(ps ...predicate.APIKey) *APIKeyUpdate {
	aku.mutation.Where(ps...)
	return aku
}

// SetOwnerID sets the "owner" edge to the User entity by ID.
func (aku *APIKeyUpdate) SetOwnerID(id int) *APIKeyUpdate {
	aku.mutation.SetOwnerID(id)
	return aku
}

// SetNillableOwnerID sets the "owner" edge to the User entity by ID if the given value is not nil.
func (aku *APIKeyUpdate) SetNillableOwnerID(id *int) *APIKeyUpdate {
	if id != nil {
		aku = aku.SetOwnerID(*id)
	}
	return aku
}

// SetOwner sets the "owner" edge to the User entity.
func (aku *APIKeyUpdate) SetOwner(u *User) *APIKeyUpdate {
	return aku.SetOwnerID(u.ID)
}

// Mutation returns the APIKeyMutation object of the builder.
func (aku *APIKeyUpdate) Mutation() *APIKeyMutation {
	return aku.mutation
}

// ClearOwner clears the "owner" edge to the User entity.
func (aku *APIKeyUpdate) ClearOwner() *APIKeyUpdate {
	aku.mutation.ClearOwner()
	return aku
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (aku *APIKeyUpdate) Save(ctx context.Context) (int, error) {
	var (
		err      error
		affected int
	)
	if len(aku.hooks) == 0 {
		affected, err = aku.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*APIKeyMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			aku.mutation = mutation
			affected, err = aku.sqlSave(ctx)
			mutation.done = true
			return affected, err
		})
		for i := len(aku.hooks) - 1; i >= 0; i-- {
			if aku.hooks[i] == nil {
				return 0, fmt.Errorf("ent: uninitialized hook (forgotten import ent/runtime?)")
			}
			mut = aku.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, aku.mutation); err != nil {
			return 0, err
		}
	}
	return affected, err
}

// SaveX is like Save, but panics if an error occurs.
func (aku *APIKeyUpdate) SaveX(ctx context.Context) int {
	affected, err := aku.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (aku *APIKeyUpdate) Exec(ctx context.Context) error {
	_, err := aku.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (aku *APIKeyUpdate) ExecX(ctx context.Context) {
	if err := aku.Exec(ctx); err != nil {
		panic(err)
	}
}

func (aku *APIKeyUpdate) sqlSave(ctx context.Context) (n int, err error) {
	_spec := &sqlgraph.UpdateSpec{
		Node: &sqlgraph.NodeSpec{
			Table:   apikey.Table,
			Columns: apikey.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt,
				Column: apikey.FieldID,
			},
		},
	}
	if ps := aku.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if aku.mutation.OwnerCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   apikey.OwnerTable,
			Columns: []string{apikey.OwnerColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: user.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := aku.mutation.OwnerIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   apikey.OwnerTable,
			Columns: []string{apikey.OwnerColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: user.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, aku.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{apikey.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	return n, nil
}

// APIKeyUpdateOne is the builder for updating a single APIKey entity.
type APIKeyUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *APIKeyMutation
}

// SetOwnerID sets the "owner" edge to the User entity by ID.
func (akuo *APIKeyUpdateOne) SetOwnerID(id int) *APIKeyUpdateOne {
	akuo.mutation.SetOwnerID(id)
	return akuo
}

// SetNillableOwnerID sets the "owner" edge to the User entity by ID if the given value is not nil.
func (akuo *APIKeyUpdateOne) SetNillableOwnerID(id *int) *APIKeyUpdateOne {
	if id != nil {
		akuo = akuo.SetOwnerID(*id)
	}
	return akuo
}

// SetOwner sets the "owner" edge to the User entity.
func (akuo *APIKeyUpdateOne) SetOwner(u *User) *APIKeyUpdateOne {
	return akuo.SetOwnerID(u.ID)
}

// Mutation returns the APIKeyMutation object of the builder.
func (akuo *APIKeyUpdateOne) Mutation() *APIKeyMutation {
	return akuo.mutation
}

// ClearOwner clears the "owner" edge to the User entity.
func (akuo *APIKeyUpdateOne) ClearOwner() *APIKeyUpdateOne {
	akuo.mutation.ClearOwner()
	return akuo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (akuo *APIKeyUpdateOne) Select(field string, fields ...string) *APIKeyUpdateOne {
	akuo.fields = append([]string{field}, fields...)
	return akuo
}

// Save executes the query and returns the updated APIKey entity.
func (akuo *APIKeyUpdateOne) Save(ctx context.Context) (*APIKey, error) {
	var (
		err  error
		node *APIKey
	)
	if len(akuo.hooks) == 0 {
		node, err = akuo.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*APIKeyMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			akuo.mutation = mutation
			node, err = akuo.sqlSave(ctx)
			mutation.done = true
			return node, err
		})
		for i := len(akuo.hooks) - 1; i >= 0; i-- {
			if akuo.hooks[i] == nil {
				return nil, fmt.Errorf("ent: uninitialized hook (forgotten import ent/runtime?)")
			}
			mut = akuo.hooks[i](mut)
		}
		v, err := mut.Mutate(ctx, akuo.mutation)
		if err != nil {
			return nil, err
		}
		nv, ok := v.(*APIKey)
		if !ok {
			return nil, fmt.Errorf("unexpected node type %T returned from APIKeyMutation", v)
		}
		node = nv
	}
	return node, err
}

// SaveX is like Save, but panics if an error occurs.
func (akuo *APIKeyUpdateOne) SaveX(ctx context.Context) *APIKey {
	node, err := akuo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (akuo *APIKeyUpdateOne) Exec(ctx context.Context) error {
	_, err := akuo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (akuo *APIKeyUpdateOne) ExecX(ctx context.Context) {
	if err := akuo.Exec(ctx); err != nil {
		panic(err)
	}
}

func (akuo *APIKeyUpdateOne) sqlSave(ctx context.Context) (_node *APIKey, err error) {
	_spec := &sqlgraph.UpdateSpec{
		Node: &sqlgraph.NodeSpec{
			Table:   apikey.Table,
			Columns: apikey.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt,
				Column: apikey.FieldID,
			},
		},
	}
	id, ok := akuo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "APIKey.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := akuo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, apikey.FieldID)
		for _, f := range fields {
			if !apikey.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != apikey.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := akuo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if akuo.mutation.OwnerCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   apikey.OwnerTable,
			Columns: []string{apikey.OwnerColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: user.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := akuo.mutation.OwnerIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   apikey.OwnerTable,
			Columns: []string{apikey.OwnerColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: user.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_node = &APIKey{config: akuo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, akuo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{apikey.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	return _node, nil
}
