// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/loopholelabs/auth/pkg/storage/default/ent/predicate"
	"github.com/loopholelabs/auth/pkg/storage/default/ent/servicekey"
	"github.com/loopholelabs/auth/pkg/storage/default/ent/user"
)

// ServiceKeyUpdate is the builder for updating ServiceKey entities.
type ServiceKeyUpdate struct {
	config
	hooks    []Hook
	mutation *ServiceKeyMutation
}

// Where appends a list predicates to the ServiceKeyUpdate builder.
func (sku *ServiceKeyUpdate) Where(ps ...predicate.ServiceKey) *ServiceKeyUpdate {
	sku.mutation.Where(ps...)
	return sku
}

// SetResource sets the "resource" field.
func (sku *ServiceKeyUpdate) SetResource(s string) *ServiceKeyUpdate {
	sku.mutation.SetResource(s)
	return sku
}

// SetNillableResource sets the "resource" field if the given value is not nil.
func (sku *ServiceKeyUpdate) SetNillableResource(s *string) *ServiceKeyUpdate {
	if s != nil {
		sku.SetResource(*s)
	}
	return sku
}

// SetNumUsed sets the "num_used" field.
func (sku *ServiceKeyUpdate) SetNumUsed(i int64) *ServiceKeyUpdate {
	sku.mutation.ResetNumUsed()
	sku.mutation.SetNumUsed(i)
	return sku
}

// SetNillableNumUsed sets the "num_used" field if the given value is not nil.
func (sku *ServiceKeyUpdate) SetNillableNumUsed(i *int64) *ServiceKeyUpdate {
	if i != nil {
		sku.SetNumUsed(*i)
	}
	return sku
}

// AddNumUsed adds i to the "num_used" field.
func (sku *ServiceKeyUpdate) AddNumUsed(i int64) *ServiceKeyUpdate {
	sku.mutation.AddNumUsed(i)
	return sku
}

// SetMaxUses sets the "max_uses" field.
func (sku *ServiceKeyUpdate) SetMaxUses(i int64) *ServiceKeyUpdate {
	sku.mutation.ResetMaxUses()
	sku.mutation.SetMaxUses(i)
	return sku
}

// SetNillableMaxUses sets the "max_uses" field if the given value is not nil.
func (sku *ServiceKeyUpdate) SetNillableMaxUses(i *int64) *ServiceKeyUpdate {
	if i != nil {
		sku.SetMaxUses(*i)
	}
	return sku
}

// AddMaxUses adds i to the "max_uses" field.
func (sku *ServiceKeyUpdate) AddMaxUses(i int64) *ServiceKeyUpdate {
	sku.mutation.AddMaxUses(i)
	return sku
}

// SetExpires sets the "expires" field.
func (sku *ServiceKeyUpdate) SetExpires(i int64) *ServiceKeyUpdate {
	sku.mutation.ResetExpires()
	sku.mutation.SetExpires(i)
	return sku
}

// SetNillableExpires sets the "expires" field if the given value is not nil.
func (sku *ServiceKeyUpdate) SetNillableExpires(i *int64) *ServiceKeyUpdate {
	if i != nil {
		sku.SetExpires(*i)
	}
	return sku
}

// AddExpires adds i to the "expires" field.
func (sku *ServiceKeyUpdate) AddExpires(i int64) *ServiceKeyUpdate {
	sku.mutation.AddExpires(i)
	return sku
}

// SetOwnerID sets the "owner" edge to the User entity by ID.
func (sku *ServiceKeyUpdate) SetOwnerID(id int) *ServiceKeyUpdate {
	sku.mutation.SetOwnerID(id)
	return sku
}

// SetNillableOwnerID sets the "owner" edge to the User entity by ID if the given value is not nil.
func (sku *ServiceKeyUpdate) SetNillableOwnerID(id *int) *ServiceKeyUpdate {
	if id != nil {
		sku = sku.SetOwnerID(*id)
	}
	return sku
}

// SetOwner sets the "owner" edge to the User entity.
func (sku *ServiceKeyUpdate) SetOwner(u *User) *ServiceKeyUpdate {
	return sku.SetOwnerID(u.ID)
}

// Mutation returns the ServiceKeyMutation object of the builder.
func (sku *ServiceKeyUpdate) Mutation() *ServiceKeyMutation {
	return sku.mutation
}

// ClearOwner clears the "owner" edge to the User entity.
func (sku *ServiceKeyUpdate) ClearOwner() *ServiceKeyUpdate {
	sku.mutation.ClearOwner()
	return sku
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (sku *ServiceKeyUpdate) Save(ctx context.Context) (int, error) {
	var (
		err      error
		affected int
	)
	if len(sku.hooks) == 0 {
		affected, err = sku.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*ServiceKeyMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			sku.mutation = mutation
			affected, err = sku.sqlSave(ctx)
			mutation.done = true
			return affected, err
		})
		for i := len(sku.hooks) - 1; i >= 0; i-- {
			if sku.hooks[i] == nil {
				return 0, fmt.Errorf("ent: uninitialized hook (forgotten import ent/runtime?)")
			}
			mut = sku.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, sku.mutation); err != nil {
			return 0, err
		}
	}
	return affected, err
}

// SaveX is like Save, but panics if an error occurs.
func (sku *ServiceKeyUpdate) SaveX(ctx context.Context) int {
	affected, err := sku.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (sku *ServiceKeyUpdate) Exec(ctx context.Context) error {
	_, err := sku.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (sku *ServiceKeyUpdate) ExecX(ctx context.Context) {
	if err := sku.Exec(ctx); err != nil {
		panic(err)
	}
}

func (sku *ServiceKeyUpdate) sqlSave(ctx context.Context) (n int, err error) {
	_spec := &sqlgraph.UpdateSpec{
		Node: &sqlgraph.NodeSpec{
			Table:   servicekey.Table,
			Columns: servicekey.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt,
				Column: servicekey.FieldID,
			},
		},
	}
	if ps := sku.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := sku.mutation.Resource(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: servicekey.FieldResource,
		})
	}
	if value, ok := sku.mutation.NumUsed(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Value:  value,
			Column: servicekey.FieldNumUsed,
		})
	}
	if value, ok := sku.mutation.AddedNumUsed(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Value:  value,
			Column: servicekey.FieldNumUsed,
		})
	}
	if value, ok := sku.mutation.MaxUses(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Value:  value,
			Column: servicekey.FieldMaxUses,
		})
	}
	if value, ok := sku.mutation.AddedMaxUses(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Value:  value,
			Column: servicekey.FieldMaxUses,
		})
	}
	if value, ok := sku.mutation.Expires(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Value:  value,
			Column: servicekey.FieldExpires,
		})
	}
	if value, ok := sku.mutation.AddedExpires(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Value:  value,
			Column: servicekey.FieldExpires,
		})
	}
	if sku.mutation.OwnerCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   servicekey.OwnerTable,
			Columns: []string{servicekey.OwnerColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: user.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := sku.mutation.OwnerIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   servicekey.OwnerTable,
			Columns: []string{servicekey.OwnerColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: user.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, sku.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{servicekey.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	return n, nil
}

// ServiceKeyUpdateOne is the builder for updating a single ServiceKey entity.
type ServiceKeyUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *ServiceKeyMutation
}

// SetResource sets the "resource" field.
func (skuo *ServiceKeyUpdateOne) SetResource(s string) *ServiceKeyUpdateOne {
	skuo.mutation.SetResource(s)
	return skuo
}

// SetNillableResource sets the "resource" field if the given value is not nil.
func (skuo *ServiceKeyUpdateOne) SetNillableResource(s *string) *ServiceKeyUpdateOne {
	if s != nil {
		skuo.SetResource(*s)
	}
	return skuo
}

// SetNumUsed sets the "num_used" field.
func (skuo *ServiceKeyUpdateOne) SetNumUsed(i int64) *ServiceKeyUpdateOne {
	skuo.mutation.ResetNumUsed()
	skuo.mutation.SetNumUsed(i)
	return skuo
}

// SetNillableNumUsed sets the "num_used" field if the given value is not nil.
func (skuo *ServiceKeyUpdateOne) SetNillableNumUsed(i *int64) *ServiceKeyUpdateOne {
	if i != nil {
		skuo.SetNumUsed(*i)
	}
	return skuo
}

// AddNumUsed adds i to the "num_used" field.
func (skuo *ServiceKeyUpdateOne) AddNumUsed(i int64) *ServiceKeyUpdateOne {
	skuo.mutation.AddNumUsed(i)
	return skuo
}

// SetMaxUses sets the "max_uses" field.
func (skuo *ServiceKeyUpdateOne) SetMaxUses(i int64) *ServiceKeyUpdateOne {
	skuo.mutation.ResetMaxUses()
	skuo.mutation.SetMaxUses(i)
	return skuo
}

// SetNillableMaxUses sets the "max_uses" field if the given value is not nil.
func (skuo *ServiceKeyUpdateOne) SetNillableMaxUses(i *int64) *ServiceKeyUpdateOne {
	if i != nil {
		skuo.SetMaxUses(*i)
	}
	return skuo
}

// AddMaxUses adds i to the "max_uses" field.
func (skuo *ServiceKeyUpdateOne) AddMaxUses(i int64) *ServiceKeyUpdateOne {
	skuo.mutation.AddMaxUses(i)
	return skuo
}

// SetExpires sets the "expires" field.
func (skuo *ServiceKeyUpdateOne) SetExpires(i int64) *ServiceKeyUpdateOne {
	skuo.mutation.ResetExpires()
	skuo.mutation.SetExpires(i)
	return skuo
}

// SetNillableExpires sets the "expires" field if the given value is not nil.
func (skuo *ServiceKeyUpdateOne) SetNillableExpires(i *int64) *ServiceKeyUpdateOne {
	if i != nil {
		skuo.SetExpires(*i)
	}
	return skuo
}

// AddExpires adds i to the "expires" field.
func (skuo *ServiceKeyUpdateOne) AddExpires(i int64) *ServiceKeyUpdateOne {
	skuo.mutation.AddExpires(i)
	return skuo
}

// SetOwnerID sets the "owner" edge to the User entity by ID.
func (skuo *ServiceKeyUpdateOne) SetOwnerID(id int) *ServiceKeyUpdateOne {
	skuo.mutation.SetOwnerID(id)
	return skuo
}

// SetNillableOwnerID sets the "owner" edge to the User entity by ID if the given value is not nil.
func (skuo *ServiceKeyUpdateOne) SetNillableOwnerID(id *int) *ServiceKeyUpdateOne {
	if id != nil {
		skuo = skuo.SetOwnerID(*id)
	}
	return skuo
}

// SetOwner sets the "owner" edge to the User entity.
func (skuo *ServiceKeyUpdateOne) SetOwner(u *User) *ServiceKeyUpdateOne {
	return skuo.SetOwnerID(u.ID)
}

// Mutation returns the ServiceKeyMutation object of the builder.
func (skuo *ServiceKeyUpdateOne) Mutation() *ServiceKeyMutation {
	return skuo.mutation
}

// ClearOwner clears the "owner" edge to the User entity.
func (skuo *ServiceKeyUpdateOne) ClearOwner() *ServiceKeyUpdateOne {
	skuo.mutation.ClearOwner()
	return skuo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (skuo *ServiceKeyUpdateOne) Select(field string, fields ...string) *ServiceKeyUpdateOne {
	skuo.fields = append([]string{field}, fields...)
	return skuo
}

// Save executes the query and returns the updated ServiceKey entity.
func (skuo *ServiceKeyUpdateOne) Save(ctx context.Context) (*ServiceKey, error) {
	var (
		err  error
		node *ServiceKey
	)
	if len(skuo.hooks) == 0 {
		node, err = skuo.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*ServiceKeyMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			skuo.mutation = mutation
			node, err = skuo.sqlSave(ctx)
			mutation.done = true
			return node, err
		})
		for i := len(skuo.hooks) - 1; i >= 0; i-- {
			if skuo.hooks[i] == nil {
				return nil, fmt.Errorf("ent: uninitialized hook (forgotten import ent/runtime?)")
			}
			mut = skuo.hooks[i](mut)
		}
		v, err := mut.Mutate(ctx, skuo.mutation)
		if err != nil {
			return nil, err
		}
		nv, ok := v.(*ServiceKey)
		if !ok {
			return nil, fmt.Errorf("unexpected node type %T returned from ServiceKeyMutation", v)
		}
		node = nv
	}
	return node, err
}

// SaveX is like Save, but panics if an error occurs.
func (skuo *ServiceKeyUpdateOne) SaveX(ctx context.Context) *ServiceKey {
	node, err := skuo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (skuo *ServiceKeyUpdateOne) Exec(ctx context.Context) error {
	_, err := skuo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (skuo *ServiceKeyUpdateOne) ExecX(ctx context.Context) {
	if err := skuo.Exec(ctx); err != nil {
		panic(err)
	}
}

func (skuo *ServiceKeyUpdateOne) sqlSave(ctx context.Context) (_node *ServiceKey, err error) {
	_spec := &sqlgraph.UpdateSpec{
		Node: &sqlgraph.NodeSpec{
			Table:   servicekey.Table,
			Columns: servicekey.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt,
				Column: servicekey.FieldID,
			},
		},
	}
	id, ok := skuo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "ServiceKey.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := skuo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, servicekey.FieldID)
		for _, f := range fields {
			if !servicekey.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != servicekey.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := skuo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := skuo.mutation.Resource(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: servicekey.FieldResource,
		})
	}
	if value, ok := skuo.mutation.NumUsed(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Value:  value,
			Column: servicekey.FieldNumUsed,
		})
	}
	if value, ok := skuo.mutation.AddedNumUsed(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Value:  value,
			Column: servicekey.FieldNumUsed,
		})
	}
	if value, ok := skuo.mutation.MaxUses(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Value:  value,
			Column: servicekey.FieldMaxUses,
		})
	}
	if value, ok := skuo.mutation.AddedMaxUses(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Value:  value,
			Column: servicekey.FieldMaxUses,
		})
	}
	if value, ok := skuo.mutation.Expires(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Value:  value,
			Column: servicekey.FieldExpires,
		})
	}
	if value, ok := skuo.mutation.AddedExpires(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Value:  value,
			Column: servicekey.FieldExpires,
		})
	}
	if skuo.mutation.OwnerCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   servicekey.OwnerTable,
			Columns: []string{servicekey.OwnerColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: user.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := skuo.mutation.OwnerIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   servicekey.OwnerTable,
			Columns: []string{servicekey.OwnerColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: user.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_node = &ServiceKey{config: skuo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, skuo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{servicekey.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	return _node, nil
}
