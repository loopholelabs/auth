// Code generated by ent, DO NOT EDIT.

package servicekey

const (
	// Label holds the string label denoting the servicekey type in the database.
	Label = "service_key"
	// FieldID holds the string denoting the id field in the database.
	FieldID = "id"
	// FieldCreatedAt holds the string denoting the created_at field in the database.
	FieldCreatedAt = "created_at"
	// FieldName holds the string denoting the name field in the database.
	FieldName = "name"
	// FieldValue holds the string denoting the value field in the database.
	FieldValue = "value"
	// FieldSecret holds the string denoting the secret field in the database.
	FieldSecret = "secret"
	// FieldResource holds the string denoting the resource field in the database.
	FieldResource = "resource"
	// FieldNumUsed holds the string denoting the num_used field in the database.
	FieldNumUsed = "num_used"
	// FieldMaxUses holds the string denoting the max_uses field in the database.
	FieldMaxUses = "max_uses"
	// FieldExpires holds the string denoting the expires field in the database.
	FieldExpires = "expires"
	// EdgeOwner holds the string denoting the owner edge name in mutations.
	EdgeOwner = "owner"
	// Table holds the table name of the servicekey in the database.
	Table = "service_keys"
	// OwnerTable is the table that holds the owner relation/edge.
	OwnerTable = "service_keys"
	// OwnerInverseTable is the table name for the User entity.
	// It exists in this package in order to avoid circular dependency with the "user" package.
	OwnerInverseTable = "users"
	// OwnerColumn is the table column denoting the owner relation/edge.
	OwnerColumn = "user_servicekeys"
)

// Columns holds all SQL columns for servicekey fields.
var Columns = []string{
	FieldID,
	FieldCreatedAt,
	FieldName,
	FieldValue,
	FieldSecret,
	FieldResource,
	FieldNumUsed,
	FieldMaxUses,
	FieldExpires,
}

// ForeignKeys holds the SQL foreign-keys that are owned by the "service_keys"
// table and are not defined as standalone fields in the schema.
var ForeignKeys = []string{
	"user_servicekeys",
}

// ValidColumn reports if the column name is valid (part of the table columns).
func ValidColumn(column string) bool {
	for i := range Columns {
		if column == Columns[i] {
			return true
		}
	}
	for i := range ForeignKeys {
		if column == ForeignKeys[i] {
			return true
		}
	}
	return false
}

var (
	// DefaultCreatedAt holds the default value on creation for the "created_at" field.
	DefaultCreatedAt func() int64
	// NameValidator is a validator for the "name" field. It is called by the builders before save.
	NameValidator func(string) error
	// ValueValidator is a validator for the "value" field. It is called by the builders before save.
	ValueValidator func(string) error
	// SecretValidator is a validator for the "secret" field. It is called by the builders before save.
	SecretValidator func([]byte) error
	// DefaultResource holds the default value on creation for the "resource" field.
	DefaultResource string
	// DefaultNumUsed holds the default value on creation for the "num_used" field.
	DefaultNumUsed int64
	// DefaultMaxUses holds the default value on creation for the "max_uses" field.
	DefaultMaxUses int64
	// DefaultExpires holds the default value on creation for the "expires" field.
	DefaultExpires int64
)
