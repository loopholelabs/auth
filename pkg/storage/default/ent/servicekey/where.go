// Code generated by ent, DO NOT EDIT.

package servicekey

import (
	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"github.com/loopholelabs/auth/pkg/storage/default/ent/predicate"
)

// ID filters vertices based on their ID field.
func ID(id int) predicate.ServiceKey {
	return predicate.ServiceKey(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldID), id))
	})
}

// IDEQ applies the EQ predicate on the ID field.
func IDEQ(id int) predicate.ServiceKey {
	return predicate.ServiceKey(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldID), id))
	})
}

// IDNEQ applies the NEQ predicate on the ID field.
func IDNEQ(id int) predicate.ServiceKey {
	return predicate.ServiceKey(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldID), id))
	})
}

// IDIn applies the In predicate on the ID field.
func IDIn(ids ...int) predicate.ServiceKey {
	return predicate.ServiceKey(func(s *sql.Selector) {
		v := make([]any, len(ids))
		for i := range v {
			v[i] = ids[i]
		}
		s.Where(sql.In(s.C(FieldID), v...))
	})
}

// IDNotIn applies the NotIn predicate on the ID field.
func IDNotIn(ids ...int) predicate.ServiceKey {
	return predicate.ServiceKey(func(s *sql.Selector) {
		v := make([]any, len(ids))
		for i := range v {
			v[i] = ids[i]
		}
		s.Where(sql.NotIn(s.C(FieldID), v...))
	})
}

// IDGT applies the GT predicate on the ID field.
func IDGT(id int) predicate.ServiceKey {
	return predicate.ServiceKey(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldID), id))
	})
}

// IDGTE applies the GTE predicate on the ID field.
func IDGTE(id int) predicate.ServiceKey {
	return predicate.ServiceKey(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldID), id))
	})
}

// IDLT applies the LT predicate on the ID field.
func IDLT(id int) predicate.ServiceKey {
	return predicate.ServiceKey(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldID), id))
	})
}

// IDLTE applies the LTE predicate on the ID field.
func IDLTE(id int) predicate.ServiceKey {
	return predicate.ServiceKey(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldID), id))
	})
}

// CreatedAt applies equality check predicate on the "created_at" field. It's identical to CreatedAtEQ.
func CreatedAt(v int64) predicate.ServiceKey {
	return predicate.ServiceKey(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldCreatedAt), v))
	})
}

// Name applies equality check predicate on the "name" field. It's identical to NameEQ.
func Name(v string) predicate.ServiceKey {
	return predicate.ServiceKey(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldName), v))
	})
}

// Value applies equality check predicate on the "value" field. It's identical to ValueEQ.
func Value(v string) predicate.ServiceKey {
	return predicate.ServiceKey(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldValue), v))
	})
}

// Secret applies equality check predicate on the "secret" field. It's identical to SecretEQ.
func Secret(v []byte) predicate.ServiceKey {
	return predicate.ServiceKey(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldSecret), v))
	})
}

// Resource applies equality check predicate on the "resource" field. It's identical to ResourceEQ.
func Resource(v string) predicate.ServiceKey {
	return predicate.ServiceKey(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldResource), v))
	})
}

// NumUsed applies equality check predicate on the "num_used" field. It's identical to NumUsedEQ.
func NumUsed(v int64) predicate.ServiceKey {
	return predicate.ServiceKey(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldNumUsed), v))
	})
}

// MaxUses applies equality check predicate on the "max_uses" field. It's identical to MaxUsesEQ.
func MaxUses(v int64) predicate.ServiceKey {
	return predicate.ServiceKey(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldMaxUses), v))
	})
}

// Expires applies equality check predicate on the "expires" field. It's identical to ExpiresEQ.
func Expires(v int64) predicate.ServiceKey {
	return predicate.ServiceKey(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldExpires), v))
	})
}

// CreatedAtEQ applies the EQ predicate on the "created_at" field.
func CreatedAtEQ(v int64) predicate.ServiceKey {
	return predicate.ServiceKey(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldCreatedAt), v))
	})
}

// CreatedAtNEQ applies the NEQ predicate on the "created_at" field.
func CreatedAtNEQ(v int64) predicate.ServiceKey {
	return predicate.ServiceKey(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldCreatedAt), v))
	})
}

// CreatedAtIn applies the In predicate on the "created_at" field.
func CreatedAtIn(vs ...int64) predicate.ServiceKey {
	v := make([]any, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.ServiceKey(func(s *sql.Selector) {
		s.Where(sql.In(s.C(FieldCreatedAt), v...))
	})
}

// CreatedAtNotIn applies the NotIn predicate on the "created_at" field.
func CreatedAtNotIn(vs ...int64) predicate.ServiceKey {
	v := make([]any, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.ServiceKey(func(s *sql.Selector) {
		s.Where(sql.NotIn(s.C(FieldCreatedAt), v...))
	})
}

// CreatedAtGT applies the GT predicate on the "created_at" field.
func CreatedAtGT(v int64) predicate.ServiceKey {
	return predicate.ServiceKey(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldCreatedAt), v))
	})
}

// CreatedAtGTE applies the GTE predicate on the "created_at" field.
func CreatedAtGTE(v int64) predicate.ServiceKey {
	return predicate.ServiceKey(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldCreatedAt), v))
	})
}

// CreatedAtLT applies the LT predicate on the "created_at" field.
func CreatedAtLT(v int64) predicate.ServiceKey {
	return predicate.ServiceKey(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldCreatedAt), v))
	})
}

// CreatedAtLTE applies the LTE predicate on the "created_at" field.
func CreatedAtLTE(v int64) predicate.ServiceKey {
	return predicate.ServiceKey(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldCreatedAt), v))
	})
}

// NameEQ applies the EQ predicate on the "name" field.
func NameEQ(v string) predicate.ServiceKey {
	return predicate.ServiceKey(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldName), v))
	})
}

// NameNEQ applies the NEQ predicate on the "name" field.
func NameNEQ(v string) predicate.ServiceKey {
	return predicate.ServiceKey(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldName), v))
	})
}

// NameIn applies the In predicate on the "name" field.
func NameIn(vs ...string) predicate.ServiceKey {
	v := make([]any, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.ServiceKey(func(s *sql.Selector) {
		s.Where(sql.In(s.C(FieldName), v...))
	})
}

// NameNotIn applies the NotIn predicate on the "name" field.
func NameNotIn(vs ...string) predicate.ServiceKey {
	v := make([]any, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.ServiceKey(func(s *sql.Selector) {
		s.Where(sql.NotIn(s.C(FieldName), v...))
	})
}

// NameGT applies the GT predicate on the "name" field.
func NameGT(v string) predicate.ServiceKey {
	return predicate.ServiceKey(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldName), v))
	})
}

// NameGTE applies the GTE predicate on the "name" field.
func NameGTE(v string) predicate.ServiceKey {
	return predicate.ServiceKey(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldName), v))
	})
}

// NameLT applies the LT predicate on the "name" field.
func NameLT(v string) predicate.ServiceKey {
	return predicate.ServiceKey(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldName), v))
	})
}

// NameLTE applies the LTE predicate on the "name" field.
func NameLTE(v string) predicate.ServiceKey {
	return predicate.ServiceKey(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldName), v))
	})
}

// NameContains applies the Contains predicate on the "name" field.
func NameContains(v string) predicate.ServiceKey {
	return predicate.ServiceKey(func(s *sql.Selector) {
		s.Where(sql.Contains(s.C(FieldName), v))
	})
}

// NameHasPrefix applies the HasPrefix predicate on the "name" field.
func NameHasPrefix(v string) predicate.ServiceKey {
	return predicate.ServiceKey(func(s *sql.Selector) {
		s.Where(sql.HasPrefix(s.C(FieldName), v))
	})
}

// NameHasSuffix applies the HasSuffix predicate on the "name" field.
func NameHasSuffix(v string) predicate.ServiceKey {
	return predicate.ServiceKey(func(s *sql.Selector) {
		s.Where(sql.HasSuffix(s.C(FieldName), v))
	})
}

// NameEqualFold applies the EqualFold predicate on the "name" field.
func NameEqualFold(v string) predicate.ServiceKey {
	return predicate.ServiceKey(func(s *sql.Selector) {
		s.Where(sql.EqualFold(s.C(FieldName), v))
	})
}

// NameContainsFold applies the ContainsFold predicate on the "name" field.
func NameContainsFold(v string) predicate.ServiceKey {
	return predicate.ServiceKey(func(s *sql.Selector) {
		s.Where(sql.ContainsFold(s.C(FieldName), v))
	})
}

// ValueEQ applies the EQ predicate on the "value" field.
func ValueEQ(v string) predicate.ServiceKey {
	return predicate.ServiceKey(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldValue), v))
	})
}

// ValueNEQ applies the NEQ predicate on the "value" field.
func ValueNEQ(v string) predicate.ServiceKey {
	return predicate.ServiceKey(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldValue), v))
	})
}

// ValueIn applies the In predicate on the "value" field.
func ValueIn(vs ...string) predicate.ServiceKey {
	v := make([]any, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.ServiceKey(func(s *sql.Selector) {
		s.Where(sql.In(s.C(FieldValue), v...))
	})
}

// ValueNotIn applies the NotIn predicate on the "value" field.
func ValueNotIn(vs ...string) predicate.ServiceKey {
	v := make([]any, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.ServiceKey(func(s *sql.Selector) {
		s.Where(sql.NotIn(s.C(FieldValue), v...))
	})
}

// ValueGT applies the GT predicate on the "value" field.
func ValueGT(v string) predicate.ServiceKey {
	return predicate.ServiceKey(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldValue), v))
	})
}

// ValueGTE applies the GTE predicate on the "value" field.
func ValueGTE(v string) predicate.ServiceKey {
	return predicate.ServiceKey(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldValue), v))
	})
}

// ValueLT applies the LT predicate on the "value" field.
func ValueLT(v string) predicate.ServiceKey {
	return predicate.ServiceKey(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldValue), v))
	})
}

// ValueLTE applies the LTE predicate on the "value" field.
func ValueLTE(v string) predicate.ServiceKey {
	return predicate.ServiceKey(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldValue), v))
	})
}

// ValueContains applies the Contains predicate on the "value" field.
func ValueContains(v string) predicate.ServiceKey {
	return predicate.ServiceKey(func(s *sql.Selector) {
		s.Where(sql.Contains(s.C(FieldValue), v))
	})
}

// ValueHasPrefix applies the HasPrefix predicate on the "value" field.
func ValueHasPrefix(v string) predicate.ServiceKey {
	return predicate.ServiceKey(func(s *sql.Selector) {
		s.Where(sql.HasPrefix(s.C(FieldValue), v))
	})
}

// ValueHasSuffix applies the HasSuffix predicate on the "value" field.
func ValueHasSuffix(v string) predicate.ServiceKey {
	return predicate.ServiceKey(func(s *sql.Selector) {
		s.Where(sql.HasSuffix(s.C(FieldValue), v))
	})
}

// ValueEqualFold applies the EqualFold predicate on the "value" field.
func ValueEqualFold(v string) predicate.ServiceKey {
	return predicate.ServiceKey(func(s *sql.Selector) {
		s.Where(sql.EqualFold(s.C(FieldValue), v))
	})
}

// ValueContainsFold applies the ContainsFold predicate on the "value" field.
func ValueContainsFold(v string) predicate.ServiceKey {
	return predicate.ServiceKey(func(s *sql.Selector) {
		s.Where(sql.ContainsFold(s.C(FieldValue), v))
	})
}

// SecretEQ applies the EQ predicate on the "secret" field.
func SecretEQ(v []byte) predicate.ServiceKey {
	return predicate.ServiceKey(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldSecret), v))
	})
}

// SecretNEQ applies the NEQ predicate on the "secret" field.
func SecretNEQ(v []byte) predicate.ServiceKey {
	return predicate.ServiceKey(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldSecret), v))
	})
}

// SecretIn applies the In predicate on the "secret" field.
func SecretIn(vs ...[]byte) predicate.ServiceKey {
	v := make([]any, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.ServiceKey(func(s *sql.Selector) {
		s.Where(sql.In(s.C(FieldSecret), v...))
	})
}

// SecretNotIn applies the NotIn predicate on the "secret" field.
func SecretNotIn(vs ...[]byte) predicate.ServiceKey {
	v := make([]any, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.ServiceKey(func(s *sql.Selector) {
		s.Where(sql.NotIn(s.C(FieldSecret), v...))
	})
}

// SecretGT applies the GT predicate on the "secret" field.
func SecretGT(v []byte) predicate.ServiceKey {
	return predicate.ServiceKey(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldSecret), v))
	})
}

// SecretGTE applies the GTE predicate on the "secret" field.
func SecretGTE(v []byte) predicate.ServiceKey {
	return predicate.ServiceKey(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldSecret), v))
	})
}

// SecretLT applies the LT predicate on the "secret" field.
func SecretLT(v []byte) predicate.ServiceKey {
	return predicate.ServiceKey(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldSecret), v))
	})
}

// SecretLTE applies the LTE predicate on the "secret" field.
func SecretLTE(v []byte) predicate.ServiceKey {
	return predicate.ServiceKey(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldSecret), v))
	})
}

// ResourceEQ applies the EQ predicate on the "resource" field.
func ResourceEQ(v string) predicate.ServiceKey {
	return predicate.ServiceKey(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldResource), v))
	})
}

// ResourceNEQ applies the NEQ predicate on the "resource" field.
func ResourceNEQ(v string) predicate.ServiceKey {
	return predicate.ServiceKey(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldResource), v))
	})
}

// ResourceIn applies the In predicate on the "resource" field.
func ResourceIn(vs ...string) predicate.ServiceKey {
	v := make([]any, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.ServiceKey(func(s *sql.Selector) {
		s.Where(sql.In(s.C(FieldResource), v...))
	})
}

// ResourceNotIn applies the NotIn predicate on the "resource" field.
func ResourceNotIn(vs ...string) predicate.ServiceKey {
	v := make([]any, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.ServiceKey(func(s *sql.Selector) {
		s.Where(sql.NotIn(s.C(FieldResource), v...))
	})
}

// ResourceGT applies the GT predicate on the "resource" field.
func ResourceGT(v string) predicate.ServiceKey {
	return predicate.ServiceKey(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldResource), v))
	})
}

// ResourceGTE applies the GTE predicate on the "resource" field.
func ResourceGTE(v string) predicate.ServiceKey {
	return predicate.ServiceKey(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldResource), v))
	})
}

// ResourceLT applies the LT predicate on the "resource" field.
func ResourceLT(v string) predicate.ServiceKey {
	return predicate.ServiceKey(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldResource), v))
	})
}

// ResourceLTE applies the LTE predicate on the "resource" field.
func ResourceLTE(v string) predicate.ServiceKey {
	return predicate.ServiceKey(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldResource), v))
	})
}

// ResourceContains applies the Contains predicate on the "resource" field.
func ResourceContains(v string) predicate.ServiceKey {
	return predicate.ServiceKey(func(s *sql.Selector) {
		s.Where(sql.Contains(s.C(FieldResource), v))
	})
}

// ResourceHasPrefix applies the HasPrefix predicate on the "resource" field.
func ResourceHasPrefix(v string) predicate.ServiceKey {
	return predicate.ServiceKey(func(s *sql.Selector) {
		s.Where(sql.HasPrefix(s.C(FieldResource), v))
	})
}

// ResourceHasSuffix applies the HasSuffix predicate on the "resource" field.
func ResourceHasSuffix(v string) predicate.ServiceKey {
	return predicate.ServiceKey(func(s *sql.Selector) {
		s.Where(sql.HasSuffix(s.C(FieldResource), v))
	})
}

// ResourceEqualFold applies the EqualFold predicate on the "resource" field.
func ResourceEqualFold(v string) predicate.ServiceKey {
	return predicate.ServiceKey(func(s *sql.Selector) {
		s.Where(sql.EqualFold(s.C(FieldResource), v))
	})
}

// ResourceContainsFold applies the ContainsFold predicate on the "resource" field.
func ResourceContainsFold(v string) predicate.ServiceKey {
	return predicate.ServiceKey(func(s *sql.Selector) {
		s.Where(sql.ContainsFold(s.C(FieldResource), v))
	})
}

// NumUsedEQ applies the EQ predicate on the "num_used" field.
func NumUsedEQ(v int64) predicate.ServiceKey {
	return predicate.ServiceKey(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldNumUsed), v))
	})
}

// NumUsedNEQ applies the NEQ predicate on the "num_used" field.
func NumUsedNEQ(v int64) predicate.ServiceKey {
	return predicate.ServiceKey(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldNumUsed), v))
	})
}

// NumUsedIn applies the In predicate on the "num_used" field.
func NumUsedIn(vs ...int64) predicate.ServiceKey {
	v := make([]any, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.ServiceKey(func(s *sql.Selector) {
		s.Where(sql.In(s.C(FieldNumUsed), v...))
	})
}

// NumUsedNotIn applies the NotIn predicate on the "num_used" field.
func NumUsedNotIn(vs ...int64) predicate.ServiceKey {
	v := make([]any, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.ServiceKey(func(s *sql.Selector) {
		s.Where(sql.NotIn(s.C(FieldNumUsed), v...))
	})
}

// NumUsedGT applies the GT predicate on the "num_used" field.
func NumUsedGT(v int64) predicate.ServiceKey {
	return predicate.ServiceKey(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldNumUsed), v))
	})
}

// NumUsedGTE applies the GTE predicate on the "num_used" field.
func NumUsedGTE(v int64) predicate.ServiceKey {
	return predicate.ServiceKey(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldNumUsed), v))
	})
}

// NumUsedLT applies the LT predicate on the "num_used" field.
func NumUsedLT(v int64) predicate.ServiceKey {
	return predicate.ServiceKey(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldNumUsed), v))
	})
}

// NumUsedLTE applies the LTE predicate on the "num_used" field.
func NumUsedLTE(v int64) predicate.ServiceKey {
	return predicate.ServiceKey(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldNumUsed), v))
	})
}

// MaxUsesEQ applies the EQ predicate on the "max_uses" field.
func MaxUsesEQ(v int64) predicate.ServiceKey {
	return predicate.ServiceKey(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldMaxUses), v))
	})
}

// MaxUsesNEQ applies the NEQ predicate on the "max_uses" field.
func MaxUsesNEQ(v int64) predicate.ServiceKey {
	return predicate.ServiceKey(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldMaxUses), v))
	})
}

// MaxUsesIn applies the In predicate on the "max_uses" field.
func MaxUsesIn(vs ...int64) predicate.ServiceKey {
	v := make([]any, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.ServiceKey(func(s *sql.Selector) {
		s.Where(sql.In(s.C(FieldMaxUses), v...))
	})
}

// MaxUsesNotIn applies the NotIn predicate on the "max_uses" field.
func MaxUsesNotIn(vs ...int64) predicate.ServiceKey {
	v := make([]any, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.ServiceKey(func(s *sql.Selector) {
		s.Where(sql.NotIn(s.C(FieldMaxUses), v...))
	})
}

// MaxUsesGT applies the GT predicate on the "max_uses" field.
func MaxUsesGT(v int64) predicate.ServiceKey {
	return predicate.ServiceKey(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldMaxUses), v))
	})
}

// MaxUsesGTE applies the GTE predicate on the "max_uses" field.
func MaxUsesGTE(v int64) predicate.ServiceKey {
	return predicate.ServiceKey(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldMaxUses), v))
	})
}

// MaxUsesLT applies the LT predicate on the "max_uses" field.
func MaxUsesLT(v int64) predicate.ServiceKey {
	return predicate.ServiceKey(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldMaxUses), v))
	})
}

// MaxUsesLTE applies the LTE predicate on the "max_uses" field.
func MaxUsesLTE(v int64) predicate.ServiceKey {
	return predicate.ServiceKey(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldMaxUses), v))
	})
}

// ExpiresEQ applies the EQ predicate on the "expires" field.
func ExpiresEQ(v int64) predicate.ServiceKey {
	return predicate.ServiceKey(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldExpires), v))
	})
}

// ExpiresNEQ applies the NEQ predicate on the "expires" field.
func ExpiresNEQ(v int64) predicate.ServiceKey {
	return predicate.ServiceKey(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldExpires), v))
	})
}

// ExpiresIn applies the In predicate on the "expires" field.
func ExpiresIn(vs ...int64) predicate.ServiceKey {
	v := make([]any, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.ServiceKey(func(s *sql.Selector) {
		s.Where(sql.In(s.C(FieldExpires), v...))
	})
}

// ExpiresNotIn applies the NotIn predicate on the "expires" field.
func ExpiresNotIn(vs ...int64) predicate.ServiceKey {
	v := make([]any, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.ServiceKey(func(s *sql.Selector) {
		s.Where(sql.NotIn(s.C(FieldExpires), v...))
	})
}

// ExpiresGT applies the GT predicate on the "expires" field.
func ExpiresGT(v int64) predicate.ServiceKey {
	return predicate.ServiceKey(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldExpires), v))
	})
}

// ExpiresGTE applies the GTE predicate on the "expires" field.
func ExpiresGTE(v int64) predicate.ServiceKey {
	return predicate.ServiceKey(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldExpires), v))
	})
}

// ExpiresLT applies the LT predicate on the "expires" field.
func ExpiresLT(v int64) predicate.ServiceKey {
	return predicate.ServiceKey(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldExpires), v))
	})
}

// ExpiresLTE applies the LTE predicate on the "expires" field.
func ExpiresLTE(v int64) predicate.ServiceKey {
	return predicate.ServiceKey(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldExpires), v))
	})
}

// HasOwner applies the HasEdge predicate on the "owner" edge.
func HasOwner() predicate.ServiceKey {
	return predicate.ServiceKey(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.To(OwnerTable, FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, OwnerTable, OwnerColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasOwnerWith applies the HasEdge predicate on the "owner" edge with a given conditions (other predicates).
func HasOwnerWith(preds ...predicate.User) predicate.ServiceKey {
	return predicate.ServiceKey(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.To(OwnerInverseTable, FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, OwnerTable, OwnerColumn),
		)
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// And groups predicates with the AND operator between them.
func And(predicates ...predicate.ServiceKey) predicate.ServiceKey {
	return predicate.ServiceKey(func(s *sql.Selector) {
		s1 := s.Clone().SetP(nil)
		for _, p := range predicates {
			p(s1)
		}
		s.Where(s1.P())
	})
}

// Or groups predicates with the OR operator between them.
func Or(predicates ...predicate.ServiceKey) predicate.ServiceKey {
	return predicate.ServiceKey(func(s *sql.Selector) {
		s1 := s.Clone().SetP(nil)
		for i, p := range predicates {
			if i > 0 {
				s1.Or()
			}
			p(s1)
		}
		s.Where(s1.P())
	})
}

// Not applies the not operator on the given predicate.
func Not(p predicate.ServiceKey) predicate.ServiceKey {
	return predicate.ServiceKey(func(s *sql.Selector) {
		p(s.Not())
	})
}
